window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"exdpn": {"fullname": "exdpn", "modulename": "exdpn", "type": "module", "doc": "<p><img src=\"./images/exdpn-logo.svg\" alt=\"eXdpn logo\" /></p>\n\n<p>exdpn (e<strong>x</strong>plainable <strong>d</strong>ata <strong>P</strong>etri <strong>n</strong>ets) is a tool to mine and evaluate explainable data Petri nets using different classification techniques.</p>\n\n<hr />\n\n<h2 id=\"getting-started\">Getting Started</h2>\n\n<p>Installing exdpn is possible via pip:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>python -m pip install exdpn \n</code></pre></div>\n\n<p>Now you can mine your first explainable data Petri net given an event log in XES format:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;path_to_event_log.xes&gt;&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">event_level_attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;event_level_attribute&#39;</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<p>This will mine a data Petri net for your event log, considering only \"event_level_attribute\" as a possible attribute for classification. \nThe <code>exdpn.data_petri_net.data_petri_net.Data_Petri_Net</code> class already takes care of the workflow to create a data Petri net. In cases where fine-grained \ncontrol of the data Petri net creation is needed or only certain functionallity of this package is needed, one can simply call all the needed functions and methods directly. </p>\n\n<p>Let's say we are only interested in extracting the guard dataset at one specific decision point in the Petri net.\nWe start off by importing the event log from memory and creating a standard Petri net:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;path_to_event_log.xes&gt;&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>We then extract all the decision points and specify our place of interest using the <code>exdpn.decisionpoints</code> module:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.decisionpoints</span> <span class=\"kn\">import</span> <span class=\"n\">find_decision_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dict</span> <span class=\"o\">=</span> <span class=\"n\">find_decision_points</span><span class=\"p\">(</span><span class=\"n\">pn</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">decision_point</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>To extract a guard dataset for the specific place <code>decision_point</code>, we call the following data extraction function from <code>exdpn.guard_datasets</code>:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> <span class=\"n\">event_level_attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;event_level_attribute&#39;</span><span class=\"p\">],</span> <span class=\"n\">places</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">decision_point</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<p>Further examples can be seen in the API documentation. The sometimes referenced XES file <code>p2p_base.xes</code> can be found on Github.</p>\n\n<hr />\n\n<h2 id=\"source-code-and-ui-application\">Source Code and UI-application</h2>\n\n<p>The source code of this package is available on Github (<a href=\"https://github.com/aarkue/eXdpn\">aarkue/eXdpn</a>).\nFurthermore, the Github also includes a graphical user interface in the form of a Python-webserver and a Docker container to easily start the web-UI locally. </p>\n\n<hr />\n\n<h2 id=\"qualitative-analysis-of-exdpn\">Qualitative Analysis of eXdpn</h2>\n\n<p>To provide some insights to the eXdpn application, the tool was tested and analyzed using four different syntetic p2p event logs. This allowed us to test whether the different machine learning techniques are able to model the decision-making behavior in the event logs. The analysis can be found on Github (<a href=\"https://github.com/aarkue/eXdpn\">aarkue/eXdpn</a>).</p>\n\n<hr />\n"}, "exdpn.data_petri_net": {"fullname": "exdpn.data_petri_net", "modulename": "exdpn.data_petri_net", "type": "module", "doc": "<p>This module provides the core functionality of the package and contains everything needed to set up the data Petri net.</p>\n\n<hr />\n\n<h1 id=\"data-petri-nets\">Data Petri Nets</h1>\n\n<p>A data Petri net is a Petri net with additional information added to the contained decision points (see <code>exdpn.decisionpoints</code>). Guards are used to model the behavior to get some insight into which transition a token chooses (see <code>exdpn.guards</code>). These guards can be understood as classification models based on the data contained in the event log. They predict which transition is most likely to follow given a certain trace and the corresponding event data.</p>\n\n<hr />\n"}, "exdpn.data_petri_net.data_petri_net": {"fullname": "exdpn.data_petri_net.data_petri_net", "modulename": "exdpn.data_petri_net.data_petri_net", "type": "module", "doc": "<p>This module provides the core functionality of the package and contains everything needed to set up the data Petri net.</p>\n\n<hr />\n\n<h1 id=\"data-petri-nets\">Data Petri Nets</h1>\n\n<p>A data Petri net is a Petri net with additional information added to the contained decision points (see <code>exdpn.decisionpoints</code>). Guards are used to model the behavior to get some insight into which transition a token chooses (see <code>exdpn.guards</code>). These guards can be understood as classification models based on the data contained in the event log. They predict which transition is most likely to follow given a certain trace and the corresponding event data.</p>\n\n<hr />\n"}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net", "type": "class", "doc": "<p></p>\n"}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.__init__", "type": "function", "doc": "<p>Initializes a data Petri net based on the event log provided.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>event_log (EventLog):</strong>  The event log to be used as a basis for the data Petri net.</li>\n<li><strong>petri_net (PetriNet, optional):</strong>  The Petri net corresponding to the event log. If not supplied, a Petri net is mined from <code>event_log</code>.</li>\n<li><strong>initial_marking (Marking, optional):</strong>  The initial marking of the Petri net corresponding to the event log. Does not have to be supplied.</li>\n<li><strong>final_marking (Marking, optional):</strong>  The final marking of the Petri net corresponding to the event log. Does not have to be supplied.</li>\n<li><strong>miner_type (str, optional):</strong>  Specifies the type of Petri net mining algorithm to be used when <code>petri_net</code> is <code>None</code>.                 Either inductive miner (\"IM\") or alpha miner (\"AM\", default).</li>\n<li><strong>case_level_attributes (List[str], optional):</strong>  The attribute list on the level of cases to be considered for each instance in the datasets.</li>\n<li><strong>event_level_attributes (List[str], optional):</strong>  The attribute list on the level of events to be considered for each instance in the datasets.</li>\n<li><strong>tail_length (int, optional):</strong>  The number of preceding events to record. Defaults to 3.</li>\n<li><strong>activityName_key (str, optional):</strong>  The key of the activity name in the event log. Defaults to <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"concept:name\").</li>\n<li><strong>ml_list (List[ML_Technique], optional):</strong>  The list of all machine learning techniques that should be evaluated. Default includes all                 implemented techniques.</li>\n<li><strong>hyperparameters (Dict[ML_Technique, Dict[str, Any]], optional):</strong>  The hyperparameters that should be used for the machine learning techniques.                 If not specified, standard/generic parameters are used.</li>\n<li><strong>guard_threshold (float, optional):</strong>  The performance threshold (between 0 and 1) that determines if a guard is added to the data Petri net or not. If the guard performance                 is smaller than the threshold the guard is not added (see <code>exdpn.guards.guard_manager.Guard_Manager.train_test</code>). Default is 0. </li>\n<li><strong>verbose (bool, optional):</strong>  Specifies if the execution should print status-esque messages or not.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <p>Use an event log to mine a Petri net based on it:</p>\n  \n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>Providing an already mined Petri net:</p>\n  \n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                     <span class=\"n\">petri_net</span> <span class=\"o\">=</span> <span class=\"n\">net</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">initial_marking</span> <span class=\"o\">=</span> <span class=\"n\">im</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">final_marking</span> <span class=\"o\">=</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>Customize a data Petri net with personal hyperparameters and a guard threshold:</p>\n  \n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                     <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">hyperparameters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">},</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;max_depth&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}},</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">guard_threshold</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    event_log: pm4py.objects.log.obj.EventLog,\n    petri_net: pm4py.objects.petri_net.obj.PetriNet = None,\n    initial_marking: pm4py.objects.petri_net.obj.Marking = None,\n    final_marking: pm4py.objects.petri_net.obj.Marking = None,\n    miner_type: str = 'AM',\n    case_level_attributes: List[str] = [],\n    event_level_attributes: List[str] = [],\n    tail_length: int = 3,\n    activityName_key: str = 'concept:name',\n    ml_list: List[exdpn.guards.ml_technique.ML_Technique] = [<ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>, <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>, <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>, <ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>],\n    hyperparameters: Dict[exdpn.guards.ml_technique.ML_Technique, Dict[str, Any]] = {<ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>: {'hidden_layer_sizes': (10, 10)}, <ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>: {'min_samples_split': 0.1, 'min_samples_leaf': 0.1, 'ccp_alpha': 0.2}, <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>: {'C': 0.5}, <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>: {'C': 0.5}},\n    guard_threshold: float = 0.0,\n    verbose: bool = True\n)", "funcdef": "def"}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.get_best", "type": "function", "doc": "<p>Returns the best guard for each decision point in the data Petri net.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[PetriNet.Place, Guard]: The best performing guard for each decision point with respect to the F1-score.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                     <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">best_guards</span> <span class=\"o\">=</span> <span class=\"n\">dpn</span><span class=\"o\">.</span><span class=\"n\">get_best</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self\n) -> Dict[pm4py.objects.petri_net.obj.PetriNet.Place, exdpn.guards.guard.Guard]", "funcdef": "def"}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.get_guard_at_place", "type": "function", "doc": "<p>Returns the best guard for given decision point.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>place (PetriNet.Place):</strong>  The decision point to look up.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Guard: The best guard at <code>place</code>.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.decisionpoints</span> <span class=\"kn\">import</span> <span class=\"n\">find_decision_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                     <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">all_decision_points</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">find_decision_points</span><span class=\"p\">(</span><span class=\"n\">dpn</span><span class=\"o\">.</span><span class=\"n\">petri_net</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_decision_point</span> <span class=\"o\">=</span> <span class=\"n\">all_decision_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_guard</span> <span class=\"o\">=</span> <span class=\"n\">dpn</span><span class=\"o\">.</span><span class=\"n\">get_guard_at_place</span><span class=\"p\">(</span><span class=\"n\">my_decision_point</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    place: pm4py.objects.petri_net.obj.PetriNet.Place\n) -> exdpn.guards.guard.Guard", "funcdef": "def"}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.get_mean_guard_conformance", "type": "function", "doc": "<p>Returns the mean conformance for the given event log, i.e., the percentage of traces (which fit on the underlying Petri net) where all guards were respected.             Respecting a guard means moving from the corresponding place to the transition predicted by the guard.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>test_event_log (EventLog):</strong>  The event log used to test the performance of the data Perti net.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: Fraction of traces that respected all decision point guards passed during token based replay.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <p>```pyshef  </p>\n  \n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>        \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                     <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span><span class=\"o\">.</span><span class=\"n\">get_mean_guard_conformance</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span> <span class=\"c1\"># value may deviate</span>\n<span class=\"go\">0.949</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self, test_event_log: pm4py.objects.log.obj.EventLog) -> float", "funcdef": "def"}, "exdpn.data_preprocessing": {"fullname": "exdpn.data_preprocessing", "modulename": "exdpn.data_preprocessing", "type": "module", "doc": "<p>This module provides basic preprocessing functionalities for the extracted guard datasets before the guard modeling. </p>\n\n<hr />\n\n<h1 id=\"preprocessing\">Preprocessing</h1>\n\n<p>The implemented proprocessing focuses on the bare essentials to ensure the implemented machine learning techniques can be executed using the provided guard datasets. </p>\n\n<hr />\n"}, "exdpn.data_preprocessing.data_preprocessing": {"fullname": "exdpn.data_preprocessing.data_preprocessing", "modulename": "exdpn.data_preprocessing.data_preprocessing", "type": "module", "doc": "<p>This module provides basic preprocessing functionalities for the extracted guard datasets before the guard modeling. </p>\n\n<hr />\n\n<h1 id=\"preprocessing\">Preprocessing</h1>\n\n<p>The implemented proprocessing focuses on the bare essentials to ensure the implemented machine learning techniques can be executed using the provided guard datasets. </p>\n\n<hr />\n"}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"fullname": "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "data_preprocessing_evaluation", "type": "function", "doc": "<p>Preprocessing of datasets before they are used for the machine learning training and testing. This function does some     basic preprocessing, such as droping columns with missing values and defining feature attributes and the target attribute.     Furthermore, the data is split into train and test datasets.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  The dataset to be transformed for evaluation of the best model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>X_train (DataFrame): The training data without the target attribute.</li>\n  <li>X_test (DataFrame): The test data without the target attribute.</li>\n  <li>y_train (Series): The target attribute values corresponding to the training data.</li>\n  <li>y_test (Series): The test attribute values corresponding to the training data.</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    dataframe: pandas.core.frame.DataFrame\n) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame, pandas.core.series.Series, pandas.core.series.Series]", "funcdef": "def"}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"fullname": "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "basic_data_preprocessing", "type": "function", "doc": "<p>Basic preprocessing before datasets, i.e., dropping of columns     with only missing values and rows with any NaN value, defining feature attributes and the target attribute.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  The dataset to be transformed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>df_X (DataFrame): The preprocessed dataset of feature attributes.</li>\n  <li>df_y (Series): The preprocessed dataset of the target attribute.</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    dataframe: pandas.core.frame.DataFrame\n) -> Tuple[pandas.core.frame.DataFrame, pandas.core.series.Series]", "funcdef": "def"}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"fullname": "exdpn.data_preprocessing.data_preprocessing.fit_scaling", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "fit_scaling", "type": "function", "doc": "<p>Fits a min-max-scaler on the dataset and returns a scaler for a scaling to [0, 1] as well as the scalable columns.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The dataset with the data to fit.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>scaler (MinMaxScaler): The min-max-scaler fitted on dataset. Scales to [0, 1].</li>\n  <li>scalable_columns (List[str]): The list of names of columns that can be scaled.</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    X: pandas.core.frame.DataFrame\n) -> Tuple[sklearn.preprocessing._data.MinMaxScaler, List[str]]", "funcdef": "def"}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"fullname": "exdpn.data_preprocessing.data_preprocessing.apply_scaling", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "apply_scaling", "type": "function", "doc": "<p>Performs min-max scaling on data with a fitted scaler object on all scalable columns.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The dataset with the data to scale.</li>\n<li><strong>scaler (MinMaxScaler):</strong>  The fitted min-max-scaler.</li>\n<li><strong>scalable_columns (List[str]):</strong>  The list of names of columns that will be scaled.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DataFrame: The data where all <code>scalable_columns</code> were scaled using the <code>scaler</code>.</p>\n</blockquote>\n", "signature": "(\n    X: pandas.core.frame.DataFrame,\n    scaler: sklearn.preprocessing._data.MinMaxScaler,\n    scalable_columns: List[str]\n) -> pandas.core.frame.DataFrame", "funcdef": "def"}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"fullname": "exdpn.data_preprocessing.data_preprocessing.fit_ohe", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "fit_ohe", "type": "function", "doc": "<p>Fits an one-hot-encoder on all categorical features present in the dataset.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The dataset with the data to fit.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>OneHotEncoder: The one-hot-encoder fitted on the dataset.</p>\n</blockquote>\n", "signature": "(\n    X: pandas.core.frame.DataFrame\n) -> sklearn.preprocessing._encoders.OneHotEncoder", "funcdef": "def"}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"fullname": "exdpn.data_preprocessing.data_preprocessing.apply_ohe", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "apply_ohe", "type": "function", "doc": "<p>Performs one-hot-encoding on all categorical features in the dataset.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The dataset with the data to encode.</li>\n<li><strong>ohe (OneHotEncoder):</strong>  The fitted one-hot-encoder.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DataFrame: The data where all categorical columns were encoded using the <code>ohe</code>.</p>\n</blockquote>\n", "signature": "(\n    X: pandas.core.frame.DataFrame,\n    ohe: sklearn.preprocessing._encoders.OneHotEncoder\n) -> pandas.core.frame.DataFrame", "funcdef": "def"}, "exdpn.decisionpoints": {"fullname": "exdpn.decisionpoints", "modulename": "exdpn.decisionpoints", "type": "module", "doc": "<p>This is a module providing the functionallity to get all decision points from a Petri net. </p>\n\n<hr />\n\n<h2 id=\"decision-points\">Decision Points</h2>\n\n<p>A decision point is a place in the Petri net with at least two outgoing transitions (i.e., arcs to transitions).</p>\n\n<hr />\n"}, "exdpn.decisionpoints.find": {"fullname": "exdpn.decisionpoints.find", "modulename": "exdpn.decisionpoints.find", "type": "module", "doc": "<p>This is a module providing the functionallity to get all decision points from a Petri net. </p>\n\n<hr />\n\n<h2 id=\"decision-points\">Decision Points</h2>\n\n<p>A decision point is a place in the Petri net with at least two outgoing transitions (i.e., arcs to transitions).</p>\n\n<hr />\n"}, "exdpn.decisionpoints.find.find_decision_points": {"fullname": "exdpn.decisionpoints.find.find_decision_points", "modulename": "exdpn.decisionpoints.find", "qualname": "find_decision_points", "type": "function", "doc": "<p>Finds decision points in a Petri net. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>net (PetriNet):</strong>  The pm4py Petri net in which to find decision points.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[PetriNet.Place, Set[PetriNet.Transition]]: A dictionary mapping places to the possible outgoing transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.decisionpoints</span> <span class=\"kn\">import</span> <span class=\"n\">find_decision_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>        \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dict</span> <span class=\"o\">=</span> <span class=\"n\">find_decision_points</span><span class=\"p\">(</span><span class=\"n\">pn</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dp_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"go\">dict_keys([({&#39;create purchase order&#39;}, {&#39;request manager approval&#39;, &#39;request standard approval&#39;}), ({&#39;request standard approval&#39;}, {&#39;approve purchase&#39;, &#39;reject purchase&#39;}), ({&#39;request manager approval&#39;}, {&#39;manager approve purchase&#39;, &#39;manager reject purchase&#39;})])</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    net: pm4py.objects.petri_net.obj.PetriNet\n) -> Dict[pm4py.objects.petri_net.obj.PetriNet.Place, Set[pm4py.objects.petri_net.obj.PetriNet.Transition]]", "funcdef": "def"}, "exdpn.guard_datasets": {"fullname": "exdpn.guard_datasets", "modulename": "exdpn.guard_datasets", "type": "module", "doc": "<p>This module provides the function to extract a dataset for each decision point in a Petri net given an event log and attributes to record.</p>\n\n<hr />\n\n<h2 id=\"guard-datasets\">Guard-Datasets</h2>\n\n<p>Each row/instance in a guard-dataset corresponds to a trace visiting the corresponding decision point (see module <code>exdpn.decisionpoints</code>) during token-based replay. This could potentially happen several times. For each such visit, the algorithm records the specified case-level attributes, event-level attributes (for the previous event in the case), and a tail of preceding events. These records make up the columns of the guard-dataset. In order to eventually do predictions with the data, the following event (i.e., transition) is recorded in the \"target\" column.</p>\n\n<hr />\n"}, "exdpn.guard_datasets.data_extraction": {"fullname": "exdpn.guard_datasets.data_extraction", "modulename": "exdpn.guard_datasets.data_extraction", "type": "module", "doc": "<p>This module provides the function to extract a dataset for each decision point in a Petri net given an event log and attributes to record.</p>\n\n<hr />\n\n<h2 id=\"guard-datasets\">Guard-Datasets</h2>\n\n<p>Each row/instance in a guard-dataset corresponds to a trace visiting the corresponding decision point (see module <code>exdpn.decisionpoints</code>) during token-based replay. This could potentially happen several times. For each such visit, the algorithm records the specified case-level attributes, event-level attributes (for the previous event in the case), and a tail of preceding events. These records make up the columns of the guard-dataset. In order to eventually do predictions with the data, the following event (i.e., transition) is recorded in the \"target\" column.</p>\n\n<hr />\n"}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"fullname": "exdpn.guard_datasets.data_extraction.extract_all_datasets", "modulename": "exdpn.guard_datasets.data_extraction", "qualname": "extract_all_datasets", "type": "function", "doc": "<p>Extracts a dataset for each decision point using token-based replay. For each instance of this decision found in the log, the following data is extracted:</p>\n\n<ol>\n<li>The specified case-level attributes of the case</li>\n<li>The specified event-level attributes of the last event of the case before this decision is made</li>\n<li>The acitivities executed in the events contained in the <code>tail_length</code> events before the decision</li>\n<li>The transition which is chosen (the <em>target</em> class)</li>\n</ol>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The event log to extract the data from.</li>\n<li><strong>net (PetriNet):</strong>  The Petri net on which the token-based replay will be performed and on which the decision points.</li>\n<li><strong>initial_marking (Marking):</strong>  The initial marking of the Petri net.</li>\n<li><strong>final_marking (Marking):</strong>  The final marking of the Petri net.</li>\n<li><strong>case_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on a case-level. Defaults to empty list.</li>\n<li><strong>event_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on an event-level. Defaults to empty list.</li>\n<li><strong>tail_length (int, optional):</strong>  The number of preceding events to record. Defaults to 3.</li>\n<li><strong>activityName_key (str, optional):</strong>  The key of the activity name in the event log. Defaults to <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"concept:name\").</li>\n<li><strong>places (List[Place], optional):</strong>  The list of places to extract datasets for. If not present, all decision points are regarded.</li>\n<li><strong>padding (Any, optional):</strong>  The padding to be used when the tail goes over beginning of the case. Defaults to \"#\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[Place, DataFrame]: The dictionary mapping places in the Petri net to their corresponding dataset.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    log: pm4py.objects.log.obj.EventLog,\n    net: pm4py.objects.petri_net.obj.PetriNet,\n    initial_marking: pm4py.objects.petri_net.obj.Marking,\n    final_marking: pm4py.objects.petri_net.obj.Marking,\n    case_level_attributes: List[str] = [],\n    event_level_attributes: List[str] = [],\n    tail_length: int = 3,\n    activityName_key: str = 'concept:name',\n    places: List[pm4py.objects.petri_net.obj.PetriNet.Place] = None,\n    padding: Any = '#'\n) -> Dict[pm4py.objects.petri_net.obj.PetriNet.Place, pandas.core.frame.DataFrame]", "funcdef": "def"}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"fullname": "exdpn.guard_datasets.data_extraction.extract_dataset_for_place", "modulename": "exdpn.guard_datasets.data_extraction", "qualname": "extract_dataset_for_place", "type": "function", "doc": "<p>Extracts the dataset for a single place using token-based replay. For each instance of this decision found in the log, the following data is extracted:</p>\n\n<ol>\n<li>The specified case-level attributes of the case</li>\n<li>The specified event-level attributes of the last event of the case before this decision is made</li>\n<li>The acitivities executed in the events contained in the <code>tail_length</code> events before the decision</li>\n<li>The transition which is chosen (the <em>target</em> class)</li>\n</ol>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>place (PetriNet.Place):</strong>  The place for which to extract the data.</li>\n<li><strong>target_transitions (Dict[PetriNet.Place, PetriNet.Transition]):</strong>  The transitions which have an input arc from this place.</li>\n<li><strong>log (EventLog):</strong>  The Event Log from which to extract the data.</li>\n<li><strong>replay (List[Dict[str, Any]] | Tuple[PetriNet, Marking, Marking]):</strong>  Either the token-based replay computed by PM4Py, or the net which to use to compute the replay.</li>\n<li><strong>case_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on a case-level. Defaults to empty list.</li>\n<li><strong>event_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on an event-level. Defaults to empty list.</li>\n<li><strong>tail_length (int, optional):</strong>  The number of preceding events to record. Defaults to 3.</li>\n<li><strong>activityName_key (str, optional):</strong>  The key of the activity name in the event log. Defaults to <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"concept:name\").</li>\n<li><strong>padding (Any, optional):</strong>  The padding to be used when the tail goes over beginning of the case. Defaults to \"#\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DataFrame: The guard-dataset extracted for the decision point at <code>place</code>.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the default case ID key defined by the XES standard (\"concept:name\") is not among the case-level attributes.</li>\n</ul>\n", "signature": "(\n    place: pm4py.objects.petri_net.obj.PetriNet.Place,\n    target_transitions: Dict[pm4py.objects.petri_net.obj.PetriNet.Place, pm4py.objects.petri_net.obj.PetriNet.Transition],\n    log: pm4py.objects.log.obj.EventLog,\n    replay: Union[List[Dict[str, Any]], Tuple[pm4py.objects.petri_net.obj.PetriNet, pm4py.objects.petri_net.obj.Marking, pm4py.objects.petri_net.obj.Marking]],\n    case_level_attributes: List[str] = [],\n    event_level_attributes: List[str] = [],\n    tail_length: int = 3,\n    activityName_key: str = 'concept:name',\n    padding: Any = '#'\n) -> pandas.core.frame.DataFrame", "funcdef": "def"}, "exdpn.guards": {"fullname": "exdpn.guards", "modulename": "exdpn.guards", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard-manager\">Guard Manager</h1>\n\n<p>The guard manager is called for each decision point to get the best possible guard model for either the default machine learning techniques (all implemented) or the selected machine learning techniques.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. The implemented machine learning techniques are: \n<code>exdpn.guards.decision_tree_guard</code>, <code>exdpn.guards.logistic_regression_guard</code>, <code>exdpn.guards.svm_guard</code>, and <code>exdpn.guards.neural_network_guard</code>.</p>\n\n<hr />\n"}, "exdpn.guards.decision_tree_guard": {"fullname": "exdpn.guards.decision_tree_guard", "modulename": "exdpn.guards.decision_tree_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.__init__", "type": "function", "doc": "<p>Initializes a decision tree based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the classifier.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If supplied hyperparameters are invalid.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    hyperparameters: Dict[str, Any] = {'min_samples_split': 0.1, 'min_samples_leaf': 0.1, 'ccp_alpha': 0.2}\n)", "funcdef": "def"}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.train", "type": "function", "doc": "<p>Trains the decision tree guard using the dataset and the specified hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the classifier behind the guard.</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a c decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Dataset of input instances used to predict the target variable, i.e., the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># event_log = import_log(&#39;p2p_base.xes&#39;)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp_key</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the decision tree guard.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame, optional):</strong>  <em>Not needed for Explainable Representation of Decision Trees</em> </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Matplotlib Figure of the trained decision tree classifier.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Returns a Figure with the explainable representation</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For plot of explainable representation please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame] = None\n) -> matplotlib.figure.Figure", "funcdef": "def"}, "exdpn.guards.guard": {"fullname": "exdpn.guards.guard", "modulename": "exdpn.guards.guard", "type": "module", "doc": "<p></p>\n"}, "exdpn.guards.guard.Guard": {"fullname": "exdpn.guards.guard.Guard", "modulename": "exdpn.guards.guard", "qualname": "Guard", "type": "class", "doc": "<p></p>\n"}, "exdpn.guards.guard.Guard.__init__": {"fullname": "exdpn.guards.guard.Guard.__init__", "modulename": "exdpn.guards.guard", "qualname": "Guard.__init__", "type": "function", "doc": "<p>Abstract class defining the guard interface.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  The hyperparameters used for the concrete machine learning classifier initialization.</li>\n</ul>\n", "signature": "(self, hyperparameters: Dict[str, Any])", "funcdef": "def"}, "exdpn.guards.guard.Guard.train": {"fullname": "exdpn.guards.guard.Guard.train", "modulename": "exdpn.guards.guard", "qualname": "Guard.train", "type": "function", "doc": "<p>Train the concrete machine learning classifier using the provided dataset.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The feature variables, used to train the classifier behind the guard.</li>\n<li><strong>y (DataFrame):</strong>  The target variable of the provided dataset.</li>\n</ul>\n\n<h6 id=\"note\">Note</h6>\n\n<blockquote>\n  <p>It is assumed that <code>y</code> corresponds to a list of <code>pm4py.objects.petri_net.obj.PetriNet.Transition</code> objects.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, "exdpn.guards.guard.Guard.predict": {"fullname": "exdpn.guards.guard.Guard.predict", "modulename": "exdpn.guards.guard", "qualname": "Guard.predict", "type": "function", "doc": "<p>Uses the concrete machine learning classifier to predict a transition.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  The dataset of input instances used to predict the target variable.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The predicted transitions.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, "exdpn.guards.guard.Guard.is_explainable": {"fullname": "exdpn.guards.guard.Guard.is_explainable", "modulename": "exdpn.guards.guard", "qualname": "Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not the concrete machine learning classifier is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the concrete machine learning classifier is explainable.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, "exdpn.guards.guard.Guard.get_explainable_representation": {"fullname": "exdpn.guards.guard.Guard.get_explainable_representation", "modulename": "exdpn.guards.guard", "qualname": "Guard.get_explainable_representation", "type": "function", "doc": "<p>Return an explainable representation of the concrete machine learning classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame, optional):</strong>  Dataset of input instances used to construct an explainable representation (not needed for some techniques (Decision Trees)).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: The explainable representation of the concrete machine learning classifier.</p>\n</blockquote>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame]\n) -> matplotlib.figure.Figure", "funcdef": "def"}, "exdpn.guards.guard_manager": {"fullname": "exdpn.guards.guard_manager", "modulename": "exdpn.guards.guard_manager", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard-manager\">Guard Manager</h1>\n\n<p>The guard manager is called for each decision point to get the best possible guard model for either the default machine learning techniques (all implemented) or the selected machine learning techniques.</p>\n\n<hr />\n"}, "exdpn.guards.guard_manager.Guard_Manager": {"fullname": "exdpn.guards.guard_manager.Guard_Manager", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager", "type": "class", "doc": "<p></p>\n"}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"fullname": "exdpn.guards.guard_manager.Guard_Manager.__init__", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager.__init__", "type": "function", "doc": "<p>Initializes all information needed for the calculation of the best guard for each decision point and /\nreturns a dictionary with the list of all guards for each machine learning technique.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  Dataset used to evaluate the guard.</li>\n<li><strong>ml_list (List[ML_Technique]):</strong>  List of all machine learning techniques that should be evaluated, default is all implemented.</li>\n<li><strong>hyperparameters (Dict[ML_Technique, Dict[str, Any]]):</strong>  Hyperparameters that should be used for the machine learning techniques,                 if not specified, standard/generic parameters are used.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create a guard manager for that decision point</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager</span> <span class=\"o\">=</span> <span class=\"n\">guards</span><span class=\"o\">.</span><span class=\"n\">Guard_Manager</span><span class=\"p\">(</span><span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    dataframe: pandas.core.frame.DataFrame,\n    ml_list: List[exdpn.guards.ml_technique.ML_Technique] = [<ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>, <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>, <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>, <ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>],\n    hyperparameters: Dict[exdpn.guards.ml_technique.ML_Technique, Dict[str, Any]] = {<ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>: {'hidden_layer_sizes': (10, 10)}, <ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>: {'min_samples_split': 0.1, 'min_samples_leaf': 0.1, 'ccp_alpha': 0.2}, <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>: {'C': 0.5}, <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>: {'C': 0.5}}\n)", "funcdef": "def"}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"fullname": "exdpn.guards.guard_manager.Guard_Manager.train_test", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager.train_test", "type": "function", "doc": "<p>Calculates for a given decision point all selected guards and returns the precision of the machine learning model,             using the specified machine learning techniques.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str, Any]: Returns a mapping of all selected machine learning techniques                 to the achieved F1-score.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create a guard manager for that decision point</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager</span> <span class=\"o\">=</span> <span class=\"n\">guards</span><span class=\"o\">.</span><span class=\"n\">Guard_Manager</span><span class=\"p\">(</span><span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager_results</span> <span class=\"o\">=</span> <span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">train_test</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> Dict[str, Any]", "funcdef": "def"}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"fullname": "exdpn.guards.guard_manager.Guard_Manager.get_best", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager.get_best", "type": "function", "doc": "<p>Returns \"best\" guard for a decision point (see <code>train_test</code>).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>best_guard_name (str): The name of the best performing guard.</li>\n  <li>best_guard (Guard): The corresponding guard object with the best performance.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If <code>train_test</code> has not been called yet.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp_key</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create a guard manager for that decision point</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager</span> <span class=\"o\">=</span> <span class=\"n\">guards</span><span class=\"o\">.</span><span class=\"n\">Guard_Manager</span><span class=\"p\">(</span><span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager_results</span> <span class=\"o\">=</span> <span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">train_test</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">best_guard</span> <span class=\"o\">=</span> <span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">get_best</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name of best guard:&quot;</span><span class=\"p\">,</span> <span class=\"n\">best_guard</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"go\">Name of best guard: Decision Tree</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> Tuple[str, exdpn.guards.guard.Guard]", "funcdef": "def"}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"fullname": "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager.get_comparison_plot", "type": "function", "doc": "<p>Constructs a comparison bar plot of the F1 scores for all trained techniques.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: The bar plot figure.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create a guard manager for that decision point</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager</span> <span class=\"o\">=</span> <span class=\"n\">guards</span><span class=\"o\">.</span><span class=\"n\">Guard_Manager</span><span class=\"p\">(</span><span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager_results</span> <span class=\"o\">=</span> <span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">train_test</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">get_comparison_plot</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For visualization of comparision plot please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(self) -> matplotlib.figure.Figure", "funcdef": "def"}, "exdpn.guards.logistic_regression_guard": {"fullname": "exdpn.guards.logistic_regression_guard", "modulename": "exdpn.guards.logistic_regression_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.__init__", "type": "function", "doc": "<p>Initializes a logistic regression based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the classifier.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If supplied hyperparameters are invalid.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self, hyperparameters: Dict[str, Any] = {'C': 0.5})", "funcdef": "def"}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.train", "type": "function", "doc": "<p>Trains the logistic regression guard using the dataset and the specified hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the classifier behind the guard.</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Dataset of input instances used to predict the target variable, i.e., the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the logistic regression guard, a Matplotlib plot using SHAP.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame):</strong>  Dataset of input instances used to construct an explainable representation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Matplotlib Figure of the trained logistic regression model.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For plot of explainable representation please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame]\n) -> matplotlib.figure.Figure", "funcdef": "def"}, "exdpn.guards.ml_technique": {"fullname": "exdpn.guards.ml_technique", "modulename": "exdpn.guards.ml_technique", "type": "module", "doc": "<p></p>\n"}, "exdpn.guards.ml_technique.ML_Technique": {"fullname": "exdpn.guards.ml_technique.ML_Technique", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique", "type": "class", "doc": "<p>This enum acts as a selector for guard classes which correspond to different machine learning classifiers.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <p>Creating a data Petri net (see <code>exdpn.data_petri_net.data_petri_net.Data_Petri_Net</code>)             with only decision tree-based guards can be done using the ml_list parameter a list containing only <code>DT</code>:</p>\n  \n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">data_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">data_petri_net</span><span class=\"o\">.</span><span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                    <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "bases": "enum.Enum"}, "exdpn.guards.ml_technique.ML_Technique.NN": {"fullname": "exdpn.guards.ml_technique.ML_Technique.NN", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.NN", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a neural network classifier.</p>\n", "default_value": " = <ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>"}, "exdpn.guards.ml_technique.ML_Technique.DT": {"fullname": "exdpn.guards.ml_technique.ML_Technique.DT", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.DT", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a decision tree classifier.</p>\n", "default_value": " = <ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>"}, "exdpn.guards.ml_technique.ML_Technique.LR": {"fullname": "exdpn.guards.ml_technique.ML_Technique.LR", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.LR", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a logistic regression classifier.</p>\n", "default_value": " = <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>"}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"fullname": "exdpn.guards.ml_technique.ML_Technique.SVM", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.SVM", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a support vector machine classifier.</p>\n", "default_value": " = <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>"}, "exdpn.guards.model_builder": {"fullname": "exdpn.guards.model_builder", "modulename": "exdpn.guards.model_builder", "type": "module", "doc": "<p></p>\n"}, "exdpn.guards.model_builder.model_builder": {"fullname": "exdpn.guards.model_builder.model_builder", "modulename": "exdpn.guards.model_builder", "qualname": "model_builder", "type": "function", "doc": "<p>Internal function to build a specific guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>model_type (ML_Technique):</strong>  Specification of machine learning technique (see <code>exdpn.guards.ml_technique.ML_Technique</code>).</li>\n<li><strong>hp (Dict[str, any]):</strong>  Hyperparameters for the machine learning model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Guard: Machine learning guard of desired type with provided hyperparameters.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If entered model type is not supported.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards.model_builder</span> <span class=\"kn\">import</span> <span class=\"n\">model_builder</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">decision_tree_guard</span> <span class=\"o\">=</span> <span class=\"n\">model_builder</span><span class=\"p\">(</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;min_samples_split&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                                      <span class=\"s1\">&#39;min_samples_leaf&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                                      <span class=\"s1\">&#39;ccp_alpha&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">logistic_regression_guard</span> <span class=\"o\">=</span> <span class=\"n\">model_builder</span><span class=\"p\">(</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">LR</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">})</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    model_type: exdpn.guards.ml_technique.ML_Technique,\n    hp: Dict[str, Any]\n) -> exdpn.guards.guard.Guard", "funcdef": "def"}, "exdpn.guards.neural_network_guard": {"fullname": "exdpn.guards.neural_network_guard", "modulename": "exdpn.guards.neural_network_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.__init__", "type": "function", "doc": "<p>Initializes a neural network based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the classifier.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If supplied hyperparameters are invalid</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    hyperparameters: Dict[str, Any] = {'hidden_layer_sizes': (10, 10)}\n)", "funcdef": "def"}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.train", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.train", "type": "function", "doc": "<p>Trains the neural network guard using the dataset and the specified hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the classifier behind the guard .</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Dataset of input instances used to predict the target variable, i.e., the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the neural network guard, a Matplotlib plot using SHAP.</p>\n\n<p>Example explainable representation:\n<img src=\"../../images/nn-example-representation.svg\" alt=\"Example explainable representation of a neural network guard\" style=\"max-height: 300px;\"/></p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame):</strong>  Dataset of input instances used to construct an explainable representation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Explainable representation of the guard.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Sample from test data, as explainable representation of NN is computationally expensive</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sampled_test_data</span> <span class=\"o\">=</span> <span class=\"n\">X_test</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)));</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">(</span><span class=\"n\">sampled_test_data</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For plot of explainable representation please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame]\n) -> matplotlib.figure.Figure", "funcdef": "def"}, "exdpn.guards.svm_guard": {"fullname": "exdpn.guards.svm_guard", "modulename": "exdpn.guards.svm_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, "exdpn.guards.svm_guard.SVM_Guard": {"fullname": "exdpn.guards.svm_guard.SVM_Guard", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"fullname": "exdpn.guards.svm_guard.SVM_Guard.__init__", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.__init__", "type": "function", "doc": "<p>Initializes a support vector machine based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the classifier.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If the supplied hyperparameters are invalid.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <blockquote>\n        <p>from exdpn.guards import SVM_Guard\n        guard = SVM_Guard()</p>\n      </blockquote>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n", "signature": "(self, hyperparameters: Dict[str, Any] = {'C': 0.5})", "funcdef": "def"}, "exdpn.guards.svm_guard.SVM_Guard.train": {"fullname": "exdpn.guards.svm_guard.SVM_Guard.train", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.train", "type": "function", "doc": "<p>Trains the support vector machine guard using the dataset and the specified hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the classifier behind the guard.</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">SVM_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">SVM_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"fullname": "exdpn.guards.svm_guard.SVM_Guard.predict", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Input instances used to predict the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">SVM_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">SVM_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"fullname": "exdpn.guards.svm_guard.SVM_Guard.is_explainable", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">SVM_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">SVM_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"fullname": "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the support vector machine guard, a Matplotlib plot using SHAP.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame):</strong>  Dataset of input instances used to construct an explainable representation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Matplotlib Figure of the trained support vector machine model.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">SVM_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">case_level_attributes</span> <span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">SVM_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For plot of explainable representation please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame]\n) -> matplotlib.figure.Figure", "funcdef": "def"}, "exdpn.petri_net": {"fullname": "exdpn.petri_net", "modulename": "exdpn.petri_net", "type": "module", "doc": "<p>This module contains the functionality to mine a petri net from the given event log.</p>\n\n<hr />\n\n<h1 id=\"petri-net\">Petri Net</h1>\n\n<p>Directed graph that models the underlying processes contained in an event log.</p>\n\n<hr />\n"}, "exdpn.petri_net.get_petri_net": {"fullname": "exdpn.petri_net.get_petri_net", "modulename": "exdpn.petri_net.get_petri_net", "type": "module", "doc": "<p>This module contains the functionality to mine a petri net from the given event log.</p>\n\n<hr />\n\n<h1 id=\"petri-net\">Petri Net</h1>\n\n<p>Directed graph that models the underlying processes contained in an event log.</p>\n\n<hr />\n"}, "exdpn.petri_net.get_petri_net.get_petri_net": {"fullname": "exdpn.petri_net.get_petri_net.get_petri_net", "modulename": "exdpn.petri_net.get_petri_net", "qualname": "get_petri_net", "type": "function", "doc": "<p>Mines Petri Net based on given event log and returns found Petri Net.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The given event log to mine the Petri net with.</li>\n<li><strong>miner_type (str):</strong>  Specifies the type of mining algorithm. Either inductive miner (\"IM\") or alpha miner (\"AM\", default).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>net (PetriNet): Petri Net based on input data, later used to find decision find decision points </li>\n  <li>initial_marking (Marking): Initial Marking</li>\n  <li>final_marking (Marking): Final Marking </li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If <code>miner_type</code> neither equal to \"AM\" nor \"IM\".</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">petri_net</span><span class=\"o\">.</span><span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    log: pm4py.objects.log.obj.EventLog,\n    miner_type: str = 'AM'\n) -> Tuple[pm4py.objects.petri_net.obj.PetriNet, pm4py.objects.petri_net.obj.Marking, pm4py.objects.petri_net.obj.Marking]", "funcdef": "def"}, "exdpn.util": {"fullname": "exdpn.util", "modulename": "exdpn.util", "type": "module", "doc": "<p>This is a module providing some basic utility functions.</p>\n"}, "exdpn.util.util": {"fullname": "exdpn.util.util", "modulename": "exdpn.util.util", "type": "module", "doc": "<p>This is a module providing some basic utility functions.</p>\n"}, "exdpn.util.util.import_log": {"fullname": "exdpn.util.util.import_log", "modulename": "exdpn.util.util", "qualname": "import_log", "type": "function", "doc": "<p>Imports an XES event log from a given path.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path (str):</strong>  The path to the XES event log file.</li>\n<li><strong>verbose (bool, optional):</strong>  If verbose, a progress bar is shown in the console. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>EventLog: The event log object.</p>\n</blockquote>\n\n<h6 id=\"note\">Note</h6>\n\n<blockquote>\n  <p>Please make sure that the event log follows the XES standard.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(path: str, verbose: bool = False) -> pm4py.objects.log.obj.EventLog", "funcdef": "def"}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"fullname": "exdpn.util.util.extend_event_log_with_total_elapsed_time", "modulename": "exdpn.util.util", "qualname": "extend_event_log_with_total_elapsed_time", "type": "function", "doc": "<p>Extends each event in an event log with an attribute corresponding to the total time elapsed (in seconds) since the start         of the corresponding case.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The event log to be extended.</li>\n<li><strong>total_elapsed_time_attribute_name (str, optional):</strong>  The event level attribute name to be used. Default is \"eXdpn::total_elapsed_time\".</li>\n<li><strong>timestamp_attribute_name (str, optional):</strong>  The timestamp attribute name present in the event log. Default is <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"time:timestamp\").</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If the attribute with name <code>timestamp_attribute_name</code> is not present in the event log.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">extend_event_log_with_total_elapsed_time</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extend_event_log_with_total_elapsed_time</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"s1\">&#39;elapsed_time&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;elapsed_time&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    log: pm4py.objects.log.obj.EventLog,\n    total_elapsed_time_attribute_name: str = 'eXdpn::total_elapsed_time',\n    timestamp_attribute_name: str = 'time:timestamp'\n) -> None", "funcdef": "def"}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"fullname": "exdpn.util.util.extend_event_log_with_preceding_event_delay", "modulename": "exdpn.util.util", "qualname": "extend_event_log_with_preceding_event_delay", "type": "function", "doc": "<p>Extends each event in an event log with an attribute corresponding to the delay (in seconds) between the current event and the preceding event         of the corresponding case. Initial events of each case have a delay of 0 seconds.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The event log to be extended.</li>\n<li><strong>preceding_event_delay_attribute_name (str, optional):</strong>  The event level attribute name to be used. Default is \"eXdpn::preceding_event_delay\".</li>\n<li><strong>timestamp_attribute_name (str, optional):</strong>  The timestamp attribute name present in the event log. Default is <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"time:timestamp\").</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If the attribute with name <code>timestamp_attribute_name</code> is not present in the event log.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">extend_event_log_with_preceding_event_delay</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;datasets&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p2p_base.xes&#39;</span><span class=\"p\">))</span>        \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extend_event_log_with_preceding_event_delay</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"s1\">&#39;delay&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;delay&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    log: pm4py.objects.log.obj.EventLog,\n    preceding_event_delay_attribute_name: str = 'eXdpn::preceding_event_delay',\n    timestamp_attribute_name: str = 'time:timestamp'\n) -> None", "funcdef": "def"}}, "docInfo": {"exdpn": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 867}, "exdpn.data_petri_net": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 114}, "exdpn.data_petri_net.data_petri_net": {"qualname": 0, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 114}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"qualname": 3, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"qualname": 5, "fullname": 12, "annotation": 0, "default_value": 0, "signature": 136, "bases": 0, "doc": 1588}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"qualname": 5, "fullname": 12, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 421}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"qualname": 7, "fullname": 14, "annotation": 0, "default_value": 0, "signature": 15, "bases": 0, "doc": 532}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"qualname": 7, "fullname": 14, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 493}, "exdpn.data_preprocessing": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 51}, "exdpn.data_preprocessing.data_preprocessing": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 51}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 145}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 15, "bases": 0, "doc": 87}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 94}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 98}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 57}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 73}, "exdpn.decisionpoints": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 51}, "exdpn.decisionpoints.find": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 51}, "exdpn.decisionpoints.find.find_decision_points": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 381}, "exdpn.guard_datasets": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 129}, "exdpn.guard_datasets.data_extraction": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 129}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 723}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 372}, "exdpn.guards": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 196}, "exdpn.guards.decision_tree_guard": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 122}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 3}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 123}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 677}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 732}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 121}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"qualname": 6, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 778}, "exdpn.guards.guard": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "exdpn.guards.guard.Guard": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "exdpn.guards.guard.Guard.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 35}, "exdpn.guards.guard.Guard.train": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 86}, "exdpn.guards.guard.Guard.predict": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 55}, "exdpn.guards.guard.Guard.is_explainable": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 35}, "exdpn.guards.guard.Guard.get_explainable_representation": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 66}, "exdpn.guards.guard_manager": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 81}, "exdpn.guards.guard_manager.Guard_Manager": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 77, "bases": 0, "doc": 631}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 5, "bases": 0, "doc": 605}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 8, "bases": 0, "doc": 712}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 6, "bases": 0, "doc": 620}, "exdpn.guards.logistic_regression_guard": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 122}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 3}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 123}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 677}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 702}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 121}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"qualname": 6, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 764}, "exdpn.guards.ml_technique": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "exdpn.guards.ml_technique.ML_Technique": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 407}, "exdpn.guards.ml_technique.ML_Technique.NN": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 3, "signature": 0, "bases": 0, "doc": 13}, "exdpn.guards.ml_technique.ML_Technique.DT": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 3, "signature": 0, "bases": 0, "doc": 13}, "exdpn.guards.ml_technique.ML_Technique.LR": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 3, "signature": 0, "bases": 0, "doc": 13}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 3, "signature": 0, "bases": 0, "doc": 14}, "exdpn.guards.model_builder": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "exdpn.guards.model_builder.model_builder": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 318}, "exdpn.guards.neural_network_guard": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 122}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 3}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 122}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 677}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 702}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 121}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"qualname": 6, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 844}, "exdpn.guards.svm_guard": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 122}, "exdpn.guards.svm_guard.SVM_Guard": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 3}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 98}, "exdpn.guards.svm_guard.SVM_Guard.train": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 676}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 693}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 4, "bases": 0, "doc": 119}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 765}, "exdpn.petri_net": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 41}, "exdpn.petri_net.get_petri_net": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 41}, "exdpn.petri_net.get_petri_net.get_petri_net": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 330}, "exdpn.util": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "exdpn.util.util": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "exdpn.util.util.import_log": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 12, "bases": 0, "doc": 222}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 427}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"qualname": 7, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 439}}, "length": 81, "save": true}, "index": {"qualname": {"root": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 7, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 7, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1, "s": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}}, "df": 7}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 6}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 2}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 5}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 6, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}}, "df": 6}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}}, "df": 6}}}}}, "n": {"docs": {"exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 7}}}, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}}, "df": 5}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 11}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 37}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.guard_manager.Guard_Manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 5}}}}}}, "l": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}}, "df": 5}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 2}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 10}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "m": {"docs": {"exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 7}}}, "o": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}}, "df": 6}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}}, "df": 5}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}}, "df": 6}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}}, "df": 6}}}}}}}, "r": {"docs": {"exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}}, "df": 1}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}}}, "fullname": {"root": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard": {"tf": 1}, "exdpn.guards.guard.Guard": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.model_builder": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 81}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 10}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 18, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1, "s": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 8, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.7320508075688772}}, "df": 10}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 5}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.7320508075688772}}, "df": 10, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 7}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 7}}}}}, "n": {"docs": {"exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 7}}}, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}}, "df": 5}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}}, "df": 12}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard": {"tf": 1}, "exdpn.guards.guard.Guard": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 47, "s": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard": {"tf": 1}, "exdpn.guards.guard.Guard": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.model_builder": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 50}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.model_builder": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "l": {"docs": {"exdpn.guards.ml_technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1.4142135623730951}}, "df": 6}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guards.model_builder": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 1}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.decisionpoints.find": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "m": {"docs": {"exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 8}}}, "o": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 7}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.ml_technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 7}}}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 7}}}}}}}, "r": {"docs": {"exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1.4142135623730951}, "exdpn.util.util.import_log": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 5}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {"exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1.7320508075688772}}, "df": 4}}, "signature": {"root": {"0": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.23606797749979}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 5}, "1": {"0": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1.4142135623730951}}, "df": 3}, "docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}}, "df": 3}, "2": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 3}, "3": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}, "5": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 4}, "docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 5.5677643628300215}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.23606797749979}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 5.385164807134504}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.util.util.import_log": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 47, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 33}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "m": {"4": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}}, "df": 1}}}, "docs": {}, "df": 0}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 7}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 1}}}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 3}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 5, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 8}}}}}}}, "x": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}}, "df": 4, ":": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 8}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 3}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "f": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 2, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "m": {"4": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 6}}}, "docs": {}, "df": 0}}}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "m": {"4": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.23606797749979}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.7320508075688772}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 10}}}, "docs": {}, "df": 0}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.7320508075688772}}, "df": 12, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 12}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.7320508075688772}}, "df": 5, "s": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 19}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 4}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.449489742783178}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 16, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.449489742783178}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 16}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.449489742783178}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.7320508075688772}}, "df": 12}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 10}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 5}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 5}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 6}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 2}}}}}}}}}}}, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.23606797749979}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.23606797749979}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}}, "df": 3}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 24}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 7, "s": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 2}}}}}, "m": {"4": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 2}}}, "docs": {}, "df": 0}}, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}}, ":": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 11}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2.23606797749979}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 24}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "p": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 3}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "h": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 9}}}, "p": {"docs": {}, "df": 0, "m": {"4": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 4}}}, "docs": {}, "df": 0}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 7, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 24}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 7}}}}, "x": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 9}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "y": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 5}}}, "bases": {"root": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1}}, "df": 4}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1}}, "df": 4}}}}}}}}, "doc": {"root": {"0": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 2}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 8}, "1": {"0": {"docs": {"exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}}, "df": 1}, "docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 19}, "2": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 2}, "3": {"9": {"docs": {"exdpn": {"tf": 2.8284271247461903}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 6.6332495807108}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 3.7416573867739413}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 3.7416573867739413}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 3.7416573867739413}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 4.69041575982343}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 3.7416573867739413}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 3.7416573867739413}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 4}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 3.7416573867739413}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 3.7416573867739413}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 3.7416573867739413}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 3.7416573867739413}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 3.7416573867739413}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 3.7416573867739413}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 3.7416573867739413}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 3.7416573867739413}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 3.7416573867739413}, "exdpn.guards.model_builder.model_builder": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 3.7416573867739413}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 3.7416573867739413}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 3.7416573867739413}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 3.7416573867739413}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 3.7416573867739413}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 3.7416573867739413}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2}, "exdpn.util.util.import_log": {"tf": 2}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2.8284271247461903}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 2.8284271247461903}}, "df": 29}, "docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}, "5": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 2}, "7": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}, "9": {"4": {"9": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"exdpn": {"tf": 19.235384061671343}, "exdpn.data_petri_net": {"tf": 4}, "exdpn.data_petri_net.data_petri_net": {"tf": 4}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 29.8496231131986}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 16.401219466856727}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 18.627936010197157}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 16.941074346097416}, "exdpn.data_preprocessing": {"tf": 3.4641016151377544}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 3.4641016151377544}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 6.4031242374328485}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 5.744562646538029}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 5.744562646538029}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 6.324555320336759}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 4.898979485566356}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 5.656854249492381}, "exdpn.decisionpoints": {"tf": 3.4641016151377544}, "exdpn.decisionpoints.find": {"tf": 3.4641016151377544}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 14.52583904633395}, "exdpn.guard_datasets": {"tf": 3.7416573867739413}, "exdpn.guard_datasets.data_extraction": {"tf": 3.7416573867739413}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 18.547236990991408}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 10.246950765959598}, "exdpn.guards": {"tf": 5.196152422706632}, "exdpn.guards.decision_tree_guard": {"tf": 3.4641016151377544}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 8.426149773176359}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 20.46948949045872}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 21.330729007701542}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 8.426149773176359}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 22}, "exdpn.guards.guard": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.__init__": {"tf": 3.872983346207417}, "exdpn.guards.guard.Guard.train": {"tf": 5.830951894845301}, "exdpn.guards.guard.Guard.predict": {"tf": 4.898979485566356}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 3.4641016151377544}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 4.898979485566356}, "exdpn.guards.guard_manager": {"tf": 3.4641016151377544}, "exdpn.guards.guard_manager.Guard_Manager": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 19.183326093250876}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 19.235384061671343}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 21.02379604162864}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 19.672315572906}, "exdpn.guards.logistic_regression_guard": {"tf": 3.4641016151377544}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 8.426149773176359}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 20.46948949045872}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 21.02379604162864}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 8.426149773176359}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 21.77154105707724}, "exdpn.guards.ml_technique": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 15.588457268119896}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1.7320508075688772}, "exdpn.guards.model_builder": {"tf": 1.7320508075688772}, "exdpn.guards.model_builder.model_builder": {"tf": 13.601470508735444}, "exdpn.guards.neural_network_guard": {"tf": 3.4641016151377544}, "exdpn.guards.neural_network_guard.Neural_Network_Guard": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 8.366600265340756}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 20.46948949045872}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 21.02379604162864}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 8.426149773176359}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 22.869193252058544}, "exdpn.guards.svm_guard": {"tf": 3.4641016151377544}, "exdpn.guards.svm_guard.SVM_Guard": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 7.211102550927978}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 20.46948949045872}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 21.02379604162864}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 8.426149773176359}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 21.77154105707724}, "exdpn.petri_net": {"tf": 3.4641016151377544}, "exdpn.petri_net.get_petri_net": {"tf": 3.4641016151377544}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 13.564659966250536}, "exdpn.util": {"tf": 1.7320508075688772}, "exdpn.util.util": {"tf": 1.7320508075688772}, "exdpn.util.util.import_log": {"tf": 11.180339887498949}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 15.066519173319364}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 15.066519173319364}}, "df": 81, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}}, "df": 10, "x": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 3.7416573867739413}, "exdpn.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3.1622776601683795}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guards": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 2}, "exdpn.guards.model_builder.model_builder": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 42, ":": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.8284271247461903}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.23606797749979}}, "df": 16}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 2}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 21, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}}, "df": 4}}, "s": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 5, "s": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.util.util.import_log": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 37}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 4}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 5}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "s": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 2, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 13}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 4.123105625617661}, "exdpn.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 4.795831523312719}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 2.8284271247461903}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 3.1622776601683795}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.449489742783178}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2.23606797749979}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 2}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2}, "exdpn.petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2}, "exdpn.util.util.import_log": {"tf": 2.23606797749979}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 3.605551275463989}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 4.358898943540674}}, "df": 40, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 8}}}, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 6}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 2}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 15}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 5}}}}}, "s": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 1, "r": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}, "d": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 2}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2.6457513110645907}}, "df": 1}}}}}}}, "x": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2.23606797749979}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2.23606797749979}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2.23606797749979}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.23606797749979}}, "df": 20, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 2}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 29}}}, "p": {"2": {"docs": {}, "df": 0, "p": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 28}}, "docs": {"exdpn": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.6457513110645907}}, "df": 8, "s": {"docs": {"exdpn": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 5}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 6}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {"exdpn": {"tf": 4}, "exdpn.data_petri_net": {"tf": 2}, "exdpn.data_petri_net.data_petri_net": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 5.0990195135927845}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 2}, "exdpn.decisionpoints": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 2.23606797749979}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 2.8284271247461903}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2}, "exdpn.petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2.6457513110645907}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 36, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 7}}}}}}, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}}, "df": 4}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 2}, "exdpn.guards.decision_tree_guard": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 32, "s": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.decisionpoints": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 15}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}}}}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 2}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 28}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 1, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "n": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 19}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 6, "s": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 6}, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}}, "df": 13}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}}, "df": 5}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}}, "df": 2}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}}, "df": 2}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 10}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 8, "s": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 9}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 2}}, "df": 6}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.7320508075688772}}, "df": 16}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 4}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 22}}}}, "m": {"4": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 7}}}, "docs": {}, "df": 0}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}, "d": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"exdpn": {"tf": 3.4641016151377544}, "exdpn.data_petri_net": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3.605551275463989}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 2}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2.23606797749979}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.7320508075688772}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 2.8284271247461903}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 3}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 42, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2.8284271247461903}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2.23606797749979}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2.23606797749979}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2.23606797749979}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2.8284271247461903}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2.8284271247461903}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2.8284271247461903}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2.23606797749979}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.449489742783178}}, "df": 30, "s": {"docs": {"exdpn": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.23606797749979}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 34}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 27}}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 8}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}}, "df": 2, "[": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 9}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 3}}}}}}}}}, "p": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.6457513110645907}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.6457513110645907}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2.6457513110645907}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2.6457513110645907}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2.6457513110645907}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2.6457513110645907}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2.6457513110645907}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.6457513110645907}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2.6457513110645907}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2.6457513110645907}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.6457513110645907}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2.6457513110645907}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2.6457513110645907}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.6457513110645907}}, "df": 19, "n": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 8}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 2.8284271247461903}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2.8284271247461903}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1.7320508075688772}, "exdpn.decisionpoints.find": {"tf": 1.7320508075688772}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 2}, "exdpn.guard_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.449489742783178}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}, "exdpn.guards": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}}, "df": 42, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 7}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 9, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.23606797749979}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 2.8284271247461903}}, "df": 1}}}}, "o": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 6}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {"exdpn": {"tf": 3}, "exdpn.data_petri_net": {"tf": 2}, "exdpn.data_petri_net.data_petri_net": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.6457513110645907}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.decisionpoints": {"tf": 2}, "exdpn.decisionpoints.find": {"tf": 2}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard": {"tf": 2.6457513110645907}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 2.6457513110645907}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 2.6457513110645907}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 53, "t": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 11, "a": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2.23606797749979}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2.6457513110645907}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 2.6457513110645907}}, "df": 6, "s": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.6457513110645907}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.8284271247461903}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 30}}}}}}}}}, "n": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 23, "d": {"docs": {"exdpn": {"tf": 2.6457513110645907}, "exdpn.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 34}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 12}}, "s": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}}, "df": 14, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.guard.Guard.train": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {"exdpn": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 32, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 4}}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 12}, "g": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 38}}, "c": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1, "s": {"docs": {"exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 2}}, "df": 1}}, "e": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.guard.Guard.__init__": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}, "m": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}}, "df": 2, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 22}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 19}}}}}}}}}, "s": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}}}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 6}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 5}}}}, "n": {"docs": {"exdpn": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 4}, "exdpn.data_petri_net": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 5.291502622129181}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 2.23606797749979}, "exdpn.decisionpoints": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 2.449489742783178}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.8284271247461903}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 2.8284271247461903}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2}, "exdpn.petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 3}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 37, "s": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 3}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.7320508075688772}}, "df": 7}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.7320508075688772}}, "df": 7}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}}, "df": 4}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 4, "w": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.6457513110645907}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 15, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 7}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {"exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2.6457513110645907}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 2.6457513110645907}}, "df": 6, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 2}}}, "n": {"docs": {"exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 1}}, "n": {"docs": {"exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}}, "df": 1}}, "i": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}}, "df": 9, "s": {"docs": {"exdpn": {"tf": 2.23606797749979}, "exdpn.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.449489742783178}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}, "exdpn.guards": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.7320508075688772}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.7320508075688772}, "exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 35}, "n": {"docs": {"exdpn": {"tf": 2.6457513110645907}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 2}}, "df": 26, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 9}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 2, "s": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 3}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 6}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard.Guard.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 11}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 4}}}}}}, "m": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.7320508075688772}}, "df": 21, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 3.1622776601683795}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 4.242640687119285}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 2.449489742783178}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2.6457513110645907}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 2.449489742783178}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 2.449489742783178}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 3}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 3.1622776601683795}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 3}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.6457513110645907}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2.6457513110645907}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2.6457513110645907}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2.6457513110645907}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 3}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 3}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 3}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 2.449489742783178}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 3}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 3}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 3}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 3}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 3}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 3}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2.23606797749979}, "exdpn.util.util.import_log": {"tf": 2}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2.449489742783178}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 2.449489742783178}}, "df": 37, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 6}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}}, "df": 4}}}}}}}}}}}}}, "f": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 18}, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "m": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.7320508075688772}}, "df": 22}}}, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 23}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"exdpn": {"tf": 3.1622776601683795}, "exdpn.data_petri_net": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3.872983346207417}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.guard_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 3.605551275463989}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 3.605551275463989}, "exdpn.guards": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2}, "exdpn.util.util.import_log": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 2}}, "df": 67, "o": {"docs": {}, "df": 0, "l": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 7}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2}}, "df": 23}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3.1622776601683795}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 2.6457513110645907}}, "df": 7, "s": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.guards": {"tf": 2}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 14}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2.23606797749979}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.8284271247461903}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2}}, "df": 19, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 2}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.7320508075688772}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}}, "df": 27}}, "e": {"docs": {"exdpn": {"tf": 4.795831523312719}, "exdpn.data_petri_net": {"tf": 2.8284271247461903}, "exdpn.data_petri_net.data_petri_net": {"tf": 2.8284271247461903}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 5.656854249492381}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 3.3166247903554}, "exdpn.data_preprocessing": {"tf": 2.449489742783178}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 2.449489742783178}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 3.605551275463989}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 2.23606797749979}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 2.449489742783178}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 2.449489742783178}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 2.23606797749979}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 2.449489742783178}, "exdpn.decisionpoints": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.guard_datasets": {"tf": 3.3166247903554}, "exdpn.guard_datasets.data_extraction": {"tf": 3.3166247903554}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 5.916079783099616}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 6}, "exdpn.guards": {"tf": 3.872983346207417}, "exdpn.guards.decision_tree_guard": {"tf": 3.1622776601683795}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 3}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.guard.Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.train": {"tf": 2.6457513110645907}, "exdpn.guards.guard.Guard.predict": {"tf": 2}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager": {"tf": 2.6457513110645907}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.6457513110645907}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard": {"tf": 3.1622776601683795}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 3}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2.6457513110645907}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard": {"tf": 3.1622776601683795}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 3}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2.6457513110645907}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.svm_guard": {"tf": 3.1622776601683795}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 3}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.petri_net": {"tf": 1.7320508075688772}, "exdpn.petri_net.get_petri_net": {"tf": 1.7320508075688772}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2}, "exdpn.util.util.import_log": {"tf": 2.6457513110645907}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 3.1622776601683795}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 3.3166247903554}}, "df": 69, "n": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 4}}, "y": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 12}, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.7320508075688772}}, "df": 5}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 15}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}}, "df": 19, "s": {"docs": {"exdpn.decisionpoints": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 9}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 4, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2.23606797749979}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2.23606797749979}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2.23606797749979}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.23606797749979}}, "df": 18, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 2}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 7}}}, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 10, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}}, "df": 4}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1.7320508075688772}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.7320508075688772}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 6}}}}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2.6457513110645907}}, "df": 1, "s": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 2}}}}}, ":": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "m": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}}, "df": 4, "e": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 5, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}}, "df": 1}, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2}}, "df": 2}, "s": {"docs": {"exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}}, "df": 19}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guards": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 2.6457513110645907}, "exdpn.guards.neural_network_guard": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 14, "s": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 36}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guards": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 24}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.8284271247461903}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.449489742783178}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2.449489742783178}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 2}, "exdpn.guards": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2.23606797749979}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 12}}}}}, "x": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}}, "df": 3}, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}, "p": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.7320508075688772}}, "df": 17, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}}, "df": 3}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3.3166247903554}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 2}, "exdpn.guards.model_builder.model_builder": {"tf": 2.449489742783178}}, "df": 7}, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.7320508075688772}}, "df": 1}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 26}}}, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2, "r": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 37}, "d": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 30}, "s": {"docs": {"exdpn.guards.guard.Guard.predict": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 29, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}, "p": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 5}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}}, "df": 3}}}}}}}}}}, "c": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 8}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 18, "s": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 2.23606797749979}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 7}, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.6457513110645907}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.8284271247461903}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 32, "s": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 3}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 22}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 5}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 4, "s": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "d": {"docs": {"exdpn.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}}, "df": 11}}, "s": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}}, "df": 10}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 23}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 26}}}, "s": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}}, "df": 7}}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 2}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 7}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1, "d": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}}, "df": 1}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 12}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 10}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 13}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 5}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "p": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 34, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 27}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 17}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"exdpn": {"tf": 2}}, "df": 1}}}}}, "t": {"docs": {"exdpn": {"tf": 6.4031242374328485}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 7.54983443527075}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 4.58257569495584}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 5.477225575051661}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 4.58257569495584}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 4.898979485566356}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 4.58257569495584}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 6.928203230275509}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 7.3484692283495345}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 3}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 7.54983443527075}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 6.244997998398398}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 6.48074069840786}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 6.928203230275509}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 6.708203932499369}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 6.928203230275509}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 7.14142842854285}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 3}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 7.3484692283495345}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 4.242640687119285}, "exdpn.guards.model_builder.model_builder": {"tf": 3.4641016151377544}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 6.928203230275509}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 7.14142842854285}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 3}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 7.745966692414834}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 6.928203230275509}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 7.14142842854285}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 3}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 7.3484692283495345}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 3.872983346207417}, "exdpn.util.util.import_log": {"tf": 3}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 4.58257569495584}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 4.58257569495584}}, "df": 36}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.8284271247461903}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1.7320508075688772}, "exdpn.guard_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 3.3166247903554}, "exdpn.guards.decision_tree_guard": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 3}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 2.23606797749979}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 4.123105625617661}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2.6457513110645907}, "exdpn.guards.logistic_regression_guard": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2.6457513110645907}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 3}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.NN": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.DT": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2.6457513110645907}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 3.1622776601683795}, "exdpn.guards.svm_guard": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2.6457513110645907}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 3}}, "df": 49, "s": {"docs": {"exdpn.data_petri_net": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.guards": {"tf": 2.23606797749979}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 38}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 36}}}}, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 5}}}}, "s": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 4, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 8}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {"exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 2}, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 11}}}, "y": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 8, "n": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "t": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 18, "[": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 16, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}}, "df": 3}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.ml_technique.ML_Technique": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}}, "df": 7, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}}, "df": 5}, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 22}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 3}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "m": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 10}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}}, "df": 2, "s": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 1, "r": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 2}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 2}}, "df": 2}, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}}, "df": 1}, "d": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 8}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.ml_technique.ML_Technique.SVM": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 2, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 9, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 5}}}}}}}}}, "y": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2}}, "df": 15, "o": {"docs": {}, "df": 0, "u": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "r": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 1}}}, "f": {"1": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "d": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 2}}, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}}, "df": 3, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 9}}}}, "g": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}, "exdpn.guards": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 52, "m": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 10}}}, "s": {"docs": {"exdpn.util.util.import_log": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 4}}, "r": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"exdpn": {"tf": 2.8284271247461903}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3.1622776601683795}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 2}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.7320508075688772}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.6457513110645907}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2.449489742783178}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.util.util.import_log": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 42}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.petri_net": {"tf": 1}, "exdpn.petri_net.get_petri_net": {"tf": 1}}, "df": 10}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {"exdpn": {"tf": 1}, "exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}}, "df": 2}}}}}}}}}}, "m": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 21}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 8}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 7, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 3.7416573867739413}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 5}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 3}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 2}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 3}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2.23606797749979}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2.23606797749979}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2.23606797749979}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2.23606797749979}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2.23606797749979}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2.23606797749979}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2.23606797749979}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2.23606797749979}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2.23606797749979}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 2.6457513110645907}, "exdpn.util.util.import_log": {"tf": 2.6457513110645907}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 3.605551275463989}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 3.605551275463989}}, "df": 40, "s": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 8}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"exdpn": {"tf": 1.4142135623730951}}, "df": 1}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"exdpn": {"tf": 2.23606797749979}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.8284271247461903}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.6457513110645907}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 28}}}, "t": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guards": {"tf": 2.449489742783178}, "exdpn.guards.decision_tree_guard": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.__init__": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard": {"tf": 1.7320508075688772}}, "df": 20}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}}, "df": 2}}, "f": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}, "n": {"docs": {"exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.449489742783178}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.23606797749979}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 26, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 5}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}}, "df": 5}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 1}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 2}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 2}}, "df": 26, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 5}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}}, "df": 6}}}}, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"exdpn.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.23606797749979}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}}, "df": 12}}}}, "e": {"docs": {"exdpn": {"tf": 2}}, "df": 1, "b": {"docs": {"exdpn": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 7}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}}, "df": 23, "l": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}}, "df": 3}}, "e": {"docs": {"exdpn": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}}, "df": 3, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "f": {"docs": {"exdpn": {"tf": 2.6457513110645907}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.8284271247461903}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1.7320508075688772}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1.4142135623730951}, "exdpn.guard_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 3.4641016151377544}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 3}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 41, "f": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}, "r": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}}, "df": 11, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {"exdpn": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.decisionpoints": {"tf": 1}, "exdpn.decisionpoints.find": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}}, "df": 3}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3.4641016151377544}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2.449489742783178}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2.23606797749979}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 3}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.7320508075688772}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.7320508075688772}, "exdpn.util.util.import_log": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.7320508075688772}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.7320508075688772}}, "df": 27}, "b": {"docs": {}, "df": 0, "j": {"docs": {"exdpn.guards.guard.Guard.train": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 3, "s": {"docs": {"exdpn.guards.guard.Guard.train": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}}, "df": 1}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 3}, "e": {"docs": {"exdpn": {"tf": 1.7320508075688772}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.8284271247461903}, "exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1.4142135623730951}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1.4142135623730951}}, "df": 20, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}}, "df": 9}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 5}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard": {"tf": 1.4142135623730951}}, "df": 5}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 2}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.guards": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 3.1622776601683795}}, "df": 7}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}}, "df": 6}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 28, "d": {"docs": {"exdpn.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}}, "df": 18}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}}, "df": 1}, "c": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.util": {"tf": 1}, "exdpn.util.util": {"tf": 1}}, "df": 6}}}, "r": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1.4142135623730951}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 2, "e": {"docs": {"exdpn.data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 7}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 2}}, "df": 1}}}}}}}, "k": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1.7320508075688772}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 21, "s": {"docs": {"exdpn": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 19}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 36, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}}, "df": 5, "s": {"docs": {"exdpn.guard_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction": {"tf": 1.4142135623730951}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 6, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_scaling": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_scaling": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.guard.Guard.predict": {"tf": 1}, "exdpn.guards.guard.Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1.7320508075688772}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1.4142135623730951}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1.4142135623730951}, "exdpn.util.util.import_log": {"tf": 1}}, "df": 34}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 2}}, "df": 5}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2.449489742783178}, "exdpn.guards.guard.Guard.get_explainable_representation": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2.23606797749979}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2.8284271247461903}, "exdpn.guards.svm_guard": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2.23606797749979}}, "df": 10}}}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 2}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.decisionpoints.find.find_decision_points": {"tf": 1.4142135623730951}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1.7320508075688772}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.ml_technique.ML_Technique.LR": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 8}}}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing": {"tf": 1}}, "df": 1}, "/": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 14}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"exdpn": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2.449489742783178}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1.4142135623730951}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 2}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 2.449489742783178}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1.4142135623730951}, "exdpn.guards.model_builder.model_builder": {"tf": 1.4142135623730951}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 2}}, "df": 23}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.4142135623730951}, "exdpn.guard_datasets.data_extraction.extract_dataset_for_place": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 3}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.guard_datasets": {"tf": 1}, "exdpn.guard_datasets.data_extraction": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.guard_manager": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 6}}}}, "s": {"docs": {"exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}}, "df": 5}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__": {"tf": 2}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.guard.Guard.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1.4142135623730951}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__": {"tf": 2}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.model_builder.model_builder": {"tf": 1.7320508075688772}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__": {"tf": 2}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.__init__": {"tf": 2}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}}, "df": 12}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"exdpn.data_preprocessing.data_preprocessing.fit_ohe": {"tf": 1.4142135623730951}, "exdpn.data_preprocessing.data_preprocessing.apply_ohe": {"tf": 1.4142135623730951}}, "df": 2}, "w": {"docs": {"exdpn.guards": {"tf": 1}, "exdpn.guards.decision_tree_guard": {"tf": 1}, "exdpn.guards.logistic_regression_guard": {"tf": 1}, "exdpn.guards.neural_network_guard": {"tf": 1}, "exdpn.guards.svm_guard": {"tf": 1}}, "df": 5}}, "p": {"docs": {"exdpn.guards.model_builder.model_builder": {"tf": 1}}, "df": 1}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__": {"tf": 1.7320508075688772}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place": {"tf": 1}, "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance": {"tf": 1}, "exdpn.decisionpoints.find.find_decision_points": {"tf": 1}, "exdpn.guard_datasets.data_extraction.extract_all_datasets": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict": {"tf": 1}, "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.__init__": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.train_test": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_best": {"tf": 1}, "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict": {"tf": 1}, "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.ml_technique.ML_Technique": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.train": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict": {"tf": 1}, "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.train": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.predict": {"tf": 1}, "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation": {"tf": 1}, "exdpn.petri_net.get_petri_net.get_petri_net": {"tf": 1}, "exdpn.util.util.import_log": {"tf": 1}, "exdpn.util.util.extend_event_log_with_total_elapsed_time": {"tf": 1}, "exdpn.util.util.extend_event_log_with_preceding_event_delay": {"tf": 1}}, "df": 27}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();