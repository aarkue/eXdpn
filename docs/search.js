window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "exdpn", "modulename": "exdpn", "type": "module", "doc": "<p><img class=\"dark-invert\" src=\"./images/exdpn-logo.svg\" alt=\"eXdpn Logo\"/></p>\n\n<p>eXdpn (e<strong>X</strong>plainable <strong>d</strong>ata <strong>P</strong>etri <strong>n</strong>ets) is a tool to mine and evaluate explainable data Petri nets using different classification techniques.\nThis can help you can find the underlying motivating factors behind decisions in your process.</p>\n\n<figure style=\"text-align: center; width: 90%\">\n    <img src=\"./images/hero.svg\" alt=\"Example explainable representation of a neural network guard\" style=\" width: 90%; border-radius: 7.5px;\" class=\"\"/>\n<figcaption style=\"margin-top: 0.5rem;\">\n<p>\n<b><i>A Motivational Example:</i></b> Decisions in the process are identified and different machine learning techniques are trained to find patterns in the decision making.\n</p>\n</figcaption>\n</figure>\n\n<p><strong>Table of Contents:</strong></p>\n\n<ul>\n<li><a href=\"#getting-started\">Getting Started</a></li>\n<li><a href=\"#source-code-and-ui-application\">Source Code and UI-application</a>\n<ul>\n<li><a href=\"#docker-deployment\">Docker Deployment</a>\n<ul>\n<li><a href=\"#using-docker-compose\">Using Docker Compose</a></li>\n<li><a href=\"#building-the-docker-container\">Building the Docker Container</a></li>\n</ul></li>\n</ul></li>\n<li><a href=\"#user-guide-web-ui\">User Guide Web UI</a>\n<ul>\n<li><a href=\"#getting-started-1\">Getting Started</a></li>\n<li><a href=\"#example-run\">Example Run</a>\n<ul>\n<li><a href=\"#discovering-a-process-model\">Discovering a Process Model</a></li>\n<li><a href=\"#configuring-the-mining-parameters\">Configuring the Mining Parameters</a></li>\n<li><a href=\"#mining-and-viewing-results\">Mining and Viewing Results</a></li>\n</ul></li>\n</ul></li>\n<li><a href=\"#explainable-representation\">Explainable Representation</a></li>\n<li><a href=\"#qualitative-analysis-of-exdpn\">Qualitative Analysis of eXdpn</a></li>\n</ul>\n\n<hr />\n\n<h2 id=\"getting-started\">Getting Started</h2>\n\n<p>Installing eXdpn is possible via pip:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code>python -m pip install exdpn \n</code></pre></div>\n\n<p>Now you can mine your first explainable data Petri net given an event log in XES format:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;path_to_event_log.xes&gt;&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">event_level_attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;event_level_attribute&#39;</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<p>This will mine a data Petri net for your event log, considering only \"event_level_attribute\" as a possible attribute for classification. \nThe <code>exdpn.data_petri_net.data_petri_net.Data_Petri_Net</code> class already takes care of the workflow to create a data Petri net. In cases where fine-grained \ncontrol of the data Petri net creation is needed or only certain functionallity of this package is needed, one can simply call all the needed functions and methods directly. </p>\n\n<p>Let's say we are only interested in extracting the guard dataset at one specific decision point in the Petri net.\nWe start off by importing the event log from memory and creating a standard Petri net:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;path_to_event_log.xes&gt;&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n</code></pre></div>\n\n<p>We then extract all the decision points and specify our place of interest using the <code>exdpn.decisionpoints</code> module:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.decisionpoints</span> <span class=\"kn\">import</span> <span class=\"n\">find_decision_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dict</span> <span class=\"o\">=</span> <span class=\"n\">find_decision_points</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">decision_point</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div>\n\n<p>To extract a guard dataset for the specific place <code>decision_point</code>, we call the following data extraction function from <code>exdpn.guard_datasets</code>:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> <span class=\"n\">event_level_attributes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;event_level_attribute&#39;</span><span class=\"p\">],</span> <span class=\"n\">places</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">decision_point</span><span class=\"p\">])</span>\n</code></pre></div>\n\n<p>Further examples can be seen in the API documentation. The sometimes referenced XES file <code>p2p_base.xes</code> can be found on Github.  </p>\n\n<hr />\n\n<h2 id=\"source-code-and-ui-application\">Source Code and UI-application</h2>\n\n<p>The source code of this package is available on Github (<a href=\"https://github.com/aarkue/eXdpn\">aarkue/eXdpn</a>).\nFurthermore, a graphical user interface is available in the form of a web-based UI and a Docker container to easily start it locally.</p>\n\n<h3 id=\"docker-deployment\">Docker Deployment</h3>\n\n<p>The project can be run with Docker.\nThe easiest way to do so is with the included <code>docker-compose.yml</code> file.</p>\n\n<h4 id=\"using-docker-compose\">Using Docker Compose</h4>\n\n<p>To create and start the docker container with docker compose simply execute <code>docker-compose up</code> in the root directory of the project.\nThe web ui will then be available on port 5000.</p>\n\n<p>To force re-creation of the container add the <code>--build</code> flag to the <code>docker-compose</code> command: <code>docker-compose up --build</code>.-</p>\n\n<h4 id=\"building-the-docker-container\">Building the Docker Container</h4>\n\n<ol>\n<li><code>docker build .</code></li>\n<li><code>docker run -p 5000:5000 &lt;container id&gt;</code></li>\n</ol>\n\n<p>The web ui will then be available on port 5000.</p>\n\n<hr />\n\n<h2 id=\"user-guide-web-ui\">User Guide Web UI</h2>\n\n<p>In the next few sections we will introduce how you can use the web UI to mine decisions in a process. </p>\n\n<h3 id=\"getting-started-2\">Getting Started</h3>\n\n<p>When you first run the web UI (either locally or through docker) you will be prompted with the following screen:\n<img src=\"./images/user-guide/start.png\" alt=\"Welcome screen of eXdpn UI\" style=\"\"/>\nHere you can start by importing any existing event log in the XES format.\nIf you do not have any XES event log at hand, you can try our P2P base event log and download it <a href=\"https://github.com/aarkue/eXdpn/raw/main/datasets/p2p_base.xes\" target=\"_blank\">here</a>.</p>\n\n<p>After importing a local event log, you will see it appear on the page.</p>\n\n<p><img src=\"./images/user-guide/log-imported.png\" alt=\"Screenshot showing the page listing the uploaded event log p2p_base.xes\" style=\"\"/></p>\n\n<p>To continue select an event log from the list of imported logs.</p>\n\n<h3 id=\"example-run\">Example Run</h3>\n\n<p>When selecting an event log the log will be loaded to memory and initial statistics about the log (like case or event count) are displayed.</p>\n\n<p><img src=\"./images/user-guide/mine_decisions_step1.png\" alt=\"Screenshot showing the basic statistics of the selected event log\" style=\"\"/></p>\n\n<p>To gain insights into the decisions of the process, you will need to go through the following steps:</p>\n\n<ol>\n<li><a href=\"#discovering-a-process-model\">Discovering a Process Model</a></li>\n<li><a href=\"#configuring-the-mining-parameters\">Configuring the Mining Parameters</a></li>\n<li><a href=\"#mining-and-viewing-results\">Mining and Viewing Results</a></li>\n</ol>\n\n<h4 id=\"discovering-a-process-model\">Discovering a Process Model</h4>\n\n<p>To find where decisions are made in the process, you first have to <strong>discover a process model</strong> for it. This can be done using the Inductive Miner or the Alpha Miner.\nOnce the process mining is done the discovered accepting Petri net will be displayed on the page, and every decision point is highlighted in red.</p>\n\n<p><img src=\"./images/user-guide/mine_decisions_step2.png\" alt=\"Screenshot showing the discovered Petri net and the available mining parameters.\" style=\"\"/></p>\n\n<h4 id=\"configuring-the-mining-parameters\">Configuring the Mining Parameters</h4>\n\n<p>Next, you can select the <strong>parameters for the decision mining</strong>.\nThe techniques that should be used can be changed.\nBy default, all available techniques (Decision Tree, Logistic Regression, Support Vector Machine (SVM), Neural Network) are selected.</p>\n\n<p>In addition, the data on which the machine learning techniques will base their decisions can be configured.\nFor that, you can choose for each of the following attribute type whether or not it should be considered in the decision mining:</p>\n\n<ul>\n<li>Case attributes\n<ul>\n<li>Case attributes are on a case-level and are used for all decisions related to that case</li>\n</ul></li>\n<li>Event attributes\n<ul>\n<li>Event-level attributes found in the event log. These attributes are used for decision points occurring immediately after this event</li>\n</ul></li>\n<li>Synthetic attributes\n<ul>\n<li>Synthetic attributes are not present in the input event log but added artifically based on other event data</li>\n<li>The following synthetic attributes are currently available:\n<ul>\n<li><strong><em>Elapsed time in case</em></strong>: Time duration since the case started is added as an attribute to every event</li>\n<li><strong><em>Time since last event</em></strong>: The duration since the previous event occurred is added as an attribute to every event</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h4 id=\"mining-and-viewing-results\">Mining and Viewing Results</h4>\n\n<p>By clicking on <strong>Mine Decisions</strong> the decision mining process is started in the background. Please stand by as this might take a few minutes. Once the mining finished, the loading indicator on the button will disappear, and the <em>mean guard conformance</em><sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> will be displayed on the Petri net.</p>\n\n<p><img src=\"./images/user-guide/mine_decisions_step3.png\" alt=\"Screenshot showing the discovered Petri net and the available mining parameters.\" style=\"\"/></p>\n\n<p>To <strong>inspect how decisions are made</strong> at a certain part of the process, you can click on one of the colored decision places in the Petri net.\nThis will open a panel on the bottom, which displays further information on the discovered decision guards for the selected place.</p>\n\n<p>The technique that performed best for the selected place and its corresponding F1 score is shown together with a comparison of the F1 scores of the all other techniques.\nAdditionally the <em>explainable representation</em> of the winning technique is shown and can give further insights into what aspects motivate the decision in question.\nTo view the explainable representation of other technique, simply select it from the dropdown menu.</p>\n\n<hr />\n\n<h2 id=\"explainable-representation\">Explainable Representation</h2>\n\n<p>To provide a better understandig of the prediction models created by the used machine learning techniques, we use two types of explainable representations. <br />\nDecision Tree models are represented by simply drawing the detected Decision Tree. Each node represents a splitting point and contains information about the splitting criteria. The leaves show the final classification for all samples in the particular leaf. <br />\nFor the explainable representation of Neural Network, Support Vector Machine and Logistic Regression the <a href=\"https://shap.readthedocs.io/en/latest/index.html\">SHAP library</a> is used. The bar plots show the mean absolute values of the SHAP values of the most important feature attributes. These SHAP values indicate the importance of a feature attribute on the the model prediction. If you are interested in learning more about SHAP values and the theory behind them, please check the references.  </p>\n\n<p>References: <br />\n<a href=\"https://towardsdatascience.com/shap-explained-the-way-i-wish-someone-explained-it-to-me-ab81cc69ef30\">https://towardsdatascience.com/shap-explained-the-way-i-wish-someone-explained-it-to-me-ab81cc69ef30</a> <br />\n<a href=\"https://towardsdatascience.com/using-shap-values-to-explain-how-your-machine-learning-model-works-732b3f40e137\">https://towardsdatascience.com/using-shap-values-to-explain-how-your-machine-learning-model-works-732b3f40e137</a>  </p>\n\n<hr />\n\n<h2 id=\"qualitative-analysis-using-exdpn\">Qualitative Analysis using eXdpn</h2>\n\n<p>To provide insight to the eXdpn application, the tool was tested and analyzed using four different synthetic P2P event logs. This allowed us to test whether the different machine learning techniques are able to model the decision-making behavior in the event logs. For each event log different so-called guards have been created. These guards are used to model the behavior at a decision point by either enabling or disabling the possible transitions after the decision point. Each event log focuses on differnt types of decision behavior, like non-random or random decisions, decisions based on nonlinear functions or based on previous activities. <br />\nThe qualitative analysis revealed some differences between the four different machine learning techniques. If the decision was made based on the value of a feature attribute, either numerical or categorical, most machine learning guards were able to detect that behavior. This also applies if a decision was made based on previous activities. If the decision points became more complex, guards based on Neural Networks, Support Vector Machines or Logistic Regression often performed better than the corresponding Decision Tree guards. <br />\nThe complete analysis (in the form of jupyter notebooks) can be found <a href=\"https://github.com/aarkue/eXdpn/tree/main/qualitative_analysis\">here</a>.  </p>\n\n<p><details>\n  <summary><strong>Qualitative Analysis (Base Model)</strong></summary>\n  <a href=\"./qualitative_analysis_base.html\" target=\"_blank\">Open in new tab</a>\n  <iframe src=\"./qualitative_analysis_base.html\" style=\"width: 100%; height:50vh; border: 2px dashed black; border-radius: 10px;\"></iframe>\n</details>\n<details>\n  <summary><strong>Qualitative Analysis (Base Log without Randomness)</strong></summary>\n  <a href=\"./qualitative_analysis_norandomness.html\" target=\"_blank\">Open in new tab</a>\n  <iframe src=\"./qualitative_analysis_norandomness.html\" style=\"width: 100%; height:50vh; border: 2px dashed black; border-radius: 10px;\"></iframe>\n</details>\n<details>\n  <summary><strong>Qualitative Analysis (Model with Non-Linearities)</strong></summary>\n  <a href=\"./qualitative_analysis_nonlinearities.html\" target=\"_blank\">Open in new tab</a>\n  <iframe src=\"./qualitative_analysis_nonlinearities.html\" style=\"width: 100%; height:50vh; border: 2px dashed black; border-radius: 10px;\"></iframe>\n</details>\n<details>\n  <summary><strong>Qualitative Analysis (Time Based Discount)</strong></summary>\n  <a href=\"./qualitative_analysis_timebaseddiscount.html\" target=\"_blank\">Open in new tab</a>\n  <iframe src=\"./qualitative_analysis_timebaseddiscount.html\" style=\"width: 100%; height:50vh; border: 2px dashed black; border-radius: 10px;\"></iframe>\n</details></p>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p>The mean guard conformance represents the fraction of cases which can be replayed perfectly on the Data Petri net, respecting all discovered guards.&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n"}, {"fullname": "exdpn.data_petri_net", "modulename": "exdpn.data_petri_net", "type": "module", "doc": "<p>This module provides the core functionality of the package and contains everything needed to set up the data Petri net.</p>\n\n<hr />\n\n<h1 id=\"data-petri-nets\">Data Petri Nets</h1>\n\n<p>A data Petri net is a Petri net with additional information added to the contained decision points (see <code>exdpn.decisionpoints</code>). Guards are used to model the behavior to get some insight into which transition a token chooses (see <code>exdpn.guards</code>). These guards can be understood as classification models based on the data contained in the event log. They predict which transition is most likely to follow given a certain trace and the corresponding event data.</p>\n\n<hr />\n"}, {"fullname": "exdpn.data_petri_net.data_petri_net", "modulename": "exdpn.data_petri_net.data_petri_net", "type": "module", "doc": "<p>This module provides the core functionality of the package and contains everything needed to set up the data Petri net.</p>\n\n<hr />\n\n<h1 id=\"data-petri-nets\">Data Petri Nets</h1>\n\n<p>A data Petri net is a Petri net with additional information added to the contained decision points (see <code>exdpn.decisionpoints</code>). Guards are used to model the behavior to get some insight into which transition a token chooses (see <code>exdpn.guards</code>). These guards can be understood as classification models based on the data contained in the event log. They predict which transition is most likely to follow given a certain trace and the corresponding event data.</p>\n\n<hr />\n"}, {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net", "type": "class", "doc": "<p></p>\n"}, {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.__init__", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.__init__", "type": "function", "doc": "<p>Initializes a data Petri net based on the event log provided.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>event_log (EventLog):</strong>  The event log to be used as a basis for the data Petri net.</li>\n<li><strong>petri_net (PetriNet, optional):</strong>  The Petri net corresponding to the event log. If not supplied, a Petri net is mined from <code>event_log</code>.</li>\n<li><strong>initial_marking (Marking, optional):</strong>  The initial marking of the Petri net corresponding to the event log. Does not have to be supplied.</li>\n<li><strong>final_marking (Marking, optional):</strong>  The final marking of the Petri net corresponding to the event log. Does not have to be supplied.</li>\n<li><strong>miner_type (str, optional):</strong>  Specifies the type of Petri net mining algorithm to be used when <code>petri_net</code> is <code>None</code>.                 Either inductive miner (\"IM\") or alpha miner (\"AM\", default).</li>\n<li><strong>case_level_attributes (List[str], optional):</strong>  The attribute list on the level of cases to be considered for each instance in the datasets.</li>\n<li><strong>event_level_attributes (List[str], optional):</strong>  The attribute list on the level of events to be considered for each instance in the datasets.</li>\n<li><strong>tail_length (int, optional):</strong>  The number of preceding events to record. Defaults to 3.</li>\n<li><strong>activityName_key (str, optional):</strong>  The key of the activity name in the event log. Defaults to <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"concept:name\").</li>\n<li><strong>ml_list (List[ML_Technique], optional):</strong>  The list of all machine learning techniques that should be evaluated. Default includes all                 implemented techniques.</li>\n<li><strong>hyperparameters (Dict[ML_Technique, Dict[str, Any]], optional):</strong>  The hyperparameters that should be used for the machine learning techniques.                 If not specified, standard/generic parameters are used.</li>\n<li><strong>CV_splits (int):</strong>  Number of folds to use in stratified corss-validation, defaults to 5.</li>\n<li><strong>CV_shuffle (bool):</strong>  Shuffle samples before splitting, defaults to False. </li>\n<li><strong>random_state (int, optional):</strong>  The random state to be used for algorithms wherever possible. Defaults to None.</li>\n<li><strong>guard_threshold (float, optional):</strong>  The performance threshold (between 0 and 1) that determines if a guard is added to the data Petri net or not. If the guard performance                 is smaller than the threshold the guard is not added (see <code>exdpn.guards.guard_manager.Guard_Manager.train_test</code>). Default is 0. </li>\n<li><strong>impute (bool):</strong>  If <code>True</code>, missing attribute values in the guard datasets will be imputed using constants and an indicator columns will be added. Default is <code>False</code>.</li>\n<li><strong>verbose (bool, optional):</strong>  Specifies if the execution should print status-esque messages or not.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <p>Use an event log to mine a Petri net based on it:</p>\n  \n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>Providing an already mined Petri net:</p>\n  \n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                     <span class=\"n\">petri_net</span> <span class=\"o\">=</span> <span class=\"n\">net</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">initial_marking</span> <span class=\"o\">=</span> <span class=\"n\">im</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">final_marking</span> <span class=\"o\">=</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>Customize a data Petri net with personal hyperparameters and a guard threshold:</p>\n  \n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">hyperparameters</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">},</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;max_depth&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}},</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">guard_threshold</span> <span class=\"o\">=</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For a full example please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    event_log: pm4py.objects.log.obj.EventLog,\n    petri_net: pm4py.objects.petri_net.obj.PetriNet = None,\n    initial_marking: pm4py.objects.petri_net.obj.Marking = None,\n    final_marking: pm4py.objects.petri_net.obj.Marking = None,\n    miner_type: str = 'AM',\n    case_level_attributes: List[str] = [],\n    event_level_attributes: List[str] = [],\n    tail_length: int = 3,\n    activityName_key: str = 'concept:name',\n    ml_list: List[exdpn.guards.ml_technique.ML_Technique] = [<ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>, <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>, <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>, <ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>, <ML_Technique.XGB: <class 'exdpn.guards.xgboost_guard.XGBoost_Guard'>>, <ML_Technique.RF: <class 'exdpn.guards.random_forest_guard.Random_Forest_Guard'>>],\n    hyperparameters: Dict[exdpn.guards.ml_technique.ML_Technique, Dict[str, Any]] = {<ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>: {'max_iter': 20000, 'learning_rate_init': 0.0001, 'hidden_layer_sizes': (10, 5), 'alpha': 0.0001}, <ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>: {'min_impurity_decrease': 0.0075}, <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>: {'C': 0.1375, 'tol': 0.001}, <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>: {'C': 0.3, 'tol': 0.001}, <ML_Technique.XGB: <class 'exdpn.guards.xgboost_guard.XGBoost_Guard'>>: {'max_depth': 2, 'n_estimators': 50}, <ML_Technique.RF: <class 'exdpn.guards.random_forest_guard.Random_Forest_Guard'>>: {'max_depth': 5}},\n    CV_splits: int = 5,\n    CV_shuffle: bool = False,\n    random_state: int = None,\n    guard_threshold: float = 0.0,\n    impute: bool = False,\n    verbose: bool = True\n)", "funcdef": "def"}, {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_best", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.get_best", "type": "function", "doc": "<p>Returns the best guard for each decision point in the data Petri net.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[PetriNet.Place, Guard]: The best performing guard for each decision point with respect to the F1-score.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">best_guards</span> <span class=\"o\">=</span> <span class=\"n\">dpn</span><span class=\"o\">.</span><span class=\"n\">get_best</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self\n) -> Dict[pm4py.objects.petri_net.obj.PetriNet.Place, exdpn.guards.guard.Guard]", "funcdef": "def"}, {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_guard_at_place", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.get_guard_at_place", "type": "function", "doc": "<p>Returns the best guard for given decision point.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>place (PetriNet.Place):</strong>  The decision point to look up.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Guard: The best guard at <code>place</code>.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.decisionpoints</span> <span class=\"kn\">import</span> <span class=\"n\">find_decision_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">all_decision_points</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">find_decision_points</span><span class=\"p\">(</span><span class=\"n\">dpn</span><span class=\"o\">.</span><span class=\"n\">petri_net</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_decision_point</span> <span class=\"o\">=</span> <span class=\"n\">all_decision_points</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_guard</span> <span class=\"o\">=</span> <span class=\"n\">dpn</span><span class=\"o\">.</span><span class=\"n\">get_guard_at_place</span><span class=\"p\">(</span><span class=\"n\">my_decision_point</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    place: pm4py.objects.petri_net.obj.PetriNet.Place\n) -> exdpn.guards.guard.Guard", "funcdef": "def"}, {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.get_mean_guard_conformance", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.get_mean_guard_conformance", "type": "function", "doc": "<p>Returns the mean conformance for the given event log, i.e., the percentage of traces (which fit on the underlying Petri net) where all guards were respected.             Respecting a guard means moving from the corresponding place to the transition predicted by the guard.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>test_event_log (EventLog):</strong>  The event log used to test the performance of the data Perti net.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float: Fraction of traces that respected all decision point guards passed during token based replay.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>        \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">,</span> <span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span><span class=\"o\">.</span><span class=\"n\">get_mean_guard_conformance</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span> <span class=\"c1\"># value may deviate</span>\n<span class=\"go\">0.949</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self, test_event_log: pm4py.objects.log.obj.EventLog) -> float", "funcdef": "def"}, {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.predict_current_decisions", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.predict_current_decisions", "type": "function", "doc": "<p>Returns a dictionary mapping places to a current decision and their next-transition-predictions for the given event log.             Current decisions of an unfit trace arise at those places which have enabled transitions in the token based replay-marking.             The current decisions of an event log are all current decisons of unfit traces with respect to token based replay (see <code>exdpn.guard_datasets.data_extraction.extract_current_decisions</code>).</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The event log used to compute current decisions.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[PetriNet.Place, DataFrame]: A mapping of decision points to current decision instances and their predicted next transition.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log_unfit</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base_unfit.xes&#39;</span><span class=\"p\">)</span>        \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">SVM</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">dpn</span><span class=\"o\">.</span><span class=\"n\">predict_current_decisions</span><span class=\"p\">(</span><span class=\"n\">event_log_unfit</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">&quot;prediction&quot;</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"go\">(request standard approval, &#39;request standard approval&#39;)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    log: pm4py.objects.log.obj.EventLog\n) -> Dict[pm4py.objects.petri_net.obj.PetriNet.Place, pandas.core.frame.DataFrame]", "funcdef": "def"}, {"fullname": "exdpn.data_petri_net.data_petri_net.Data_Petri_Net.explain_current_decision_predictions_for_trace", "modulename": "exdpn.data_petri_net.data_petri_net", "qualname": "Data_Petri_Net.explain_current_decision_predictions_for_trace", "type": "function", "doc": "<p>Yields pairs of the form: (decision point, predicted next transition, local explanation) for the given current decision pedictions of the specified trace.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>curr_decision_preds (Dict[PetriNet.Place, DataFrame]):</strong>  A mapping of decision points to current decision instances and their predicted next transition.                 (see <code>exdpn.data_petri_net.data_petri_net.Data_Petri_Net.predict_current_decisions</code>)</li>\n<li><strong>trace_id (str):</strong>  The ID of the trace for which the local explanations are computed.</li>\n<li><strong>base_sample_size (int, optional):</strong>  The number of instances used to compute the local explanations. Defaults to 10.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[PetriNet.Place, PetriNet.Transition, Dict[str, Figure]]: A decision point, predicted next transition, local explanation pair.</p>\n</blockquote>\n", "signature": "(\n    self,\n    curr_decision_preds: Dict[pm4py.objects.petri_net.obj.PetriNet.Place, pandas.core.frame.DataFrame],\n    trace_id: str,\n    base_sample_size: int = 10\n) -> Iterator[Tuple[pm4py.objects.petri_net.obj.PetriNet.Place, pm4py.objects.petri_net.obj.PetriNet.Transition, Dict[str, matplotlib.figure.Figure]]]", "funcdef": "def"}, {"fullname": "exdpn.data_preprocessing", "modulename": "exdpn.data_preprocessing", "type": "module", "doc": "<p>This module provides basic preprocessing functionalities for the extracted guard datasets before the guard modeling. </p>\n\n<hr />\n\n<h1 id=\"preprocessing\">Preprocessing</h1>\n\n<p>The implemented proprocessing focuses on the bare essentials to ensure the implemented machine learning techniques can be executed using the provided guard datasets. </p>\n\n<hr />\n"}, {"fullname": "exdpn.data_preprocessing.data_preprocessing", "modulename": "exdpn.data_preprocessing.data_preprocessing", "type": "module", "doc": "<p>This module provides basic preprocessing functionalities for the extracted guard datasets before the guard modeling. </p>\n\n<hr />\n\n<h1 id=\"preprocessing\">Preprocessing</h1>\n\n<p>The implemented proprocessing focuses on the bare essentials to ensure the implemented machine learning techniques can be executed using the provided guard datasets. </p>\n\n<hr />\n"}, {"fullname": "exdpn.data_preprocessing.data_preprocessing.data_preprocessing_evaluation", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "data_preprocessing_evaluation", "type": "function", "doc": "<p>Preprocessing of datasets before they are used for the machine learning training and testing. This function does some     basic preprocessing, such as droping columns with missing values and defining feature attributes and the target attribute.     Furthermore, the data is split into train and test datasets.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  The dataset to be transformed for evaluation of the best model.</li>\n<li><strong>random_state (int, optional):</strong>  The random state to be used for the train/test split. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>X_train (DataFrame): The training data without the target attribute.</li>\n  <li>X_test (DataFrame): The test data without the target attribute.</li>\n  <li>y_train (Series): The target attribute values corresponding to the training data.</li>\n  <li>y_test (Series): The test attribute values corresponding to the training data.</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    dataframe: pandas.core.frame.DataFrame,\n    random_state: int = None\n) -> Tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame, pandas.core.series.Series, pandas.core.series.Series]", "funcdef": "def"}, {"fullname": "exdpn.data_preprocessing.data_preprocessing.basic_data_preprocessing", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "basic_data_preprocessing", "type": "function", "doc": "<p>Basic preprocessing before datasets, i.e., dropping of columns     with only missing values and rows with any NaN value, defining feature attributes and the target attribute.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  The dataset to be transformed.</li>\n<li><strong>impute (bool):</strong>  If <code>True</code>, missing attribute values will be imputed using constants and an indicator columns will be added. Default is <code>False</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>df_X (DataFrame): The preprocessed dataset of feature attributes.</li>\n  <li>df_y (Series): The preprocessed dataset of the target attribute.</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    dataframe: pandas.core.frame.DataFrame,\n    impute: bool = False\n) -> Tuple[pandas.core.frame.DataFrame, pandas.core.series.Series]", "funcdef": "def"}, {"fullname": "exdpn.data_preprocessing.data_preprocessing.fit_scaling", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "fit_scaling", "type": "function", "doc": "<p>Fits a min-max-scaler on the dataset and returns a scaler for a scaling to [0, 1] as well as the scalable columns.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The dataset with the data to fit.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>scaler (StandardScaler): The standard-scaler fitted on dataset. Scales to mean 0 and standard deviation 1.</li>\n  <li>scalable_columns (List[str]): The list of names of columns that can be scaled.</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    X: pandas.core.frame.DataFrame\n) -> Tuple[sklearn.preprocessing._data.StandardScaler, List[str]]", "funcdef": "def"}, {"fullname": "exdpn.data_preprocessing.data_preprocessing.apply_scaling", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "apply_scaling", "type": "function", "doc": "<p>Performs min-max scaling on data with a fitted scaler object on all scalable columns.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The dataset with the data to scale.</li>\n<li><strong>scaler (StandardScaler):</strong>  The fitted standard-scaler.</li>\n<li><strong>scalable_columns (List[str]):</strong>  The list of names of columns that will be scaled.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DataFrame: The data where all <code>scalable_columns</code> were scaled using the <code>scaler</code>.</p>\n</blockquote>\n", "signature": "(\n    X: pandas.core.frame.DataFrame,\n    scaler: sklearn.preprocessing._data.StandardScaler,\n    scalable_columns: List[str]\n) -> pandas.core.frame.DataFrame", "funcdef": "def"}, {"fullname": "exdpn.data_preprocessing.data_preprocessing.fit_ohe", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "fit_ohe", "type": "function", "doc": "<p>Fits an one-hot-encoder on all categorical features present in the dataset.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The dataset with the data to fit.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>OneHotEncoder: The one-hot-encoder fitted on the dataset.</p>\n</blockquote>\n", "signature": "(\n    X: pandas.core.frame.DataFrame\n) -> sklearn.preprocessing._encoders.OneHotEncoder", "funcdef": "def"}, {"fullname": "exdpn.data_preprocessing.data_preprocessing.apply_ohe", "modulename": "exdpn.data_preprocessing.data_preprocessing", "qualname": "apply_ohe", "type": "function", "doc": "<p>Performs one-hot-encoding on all categorical features in the dataset.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The dataset with the data to encode.</li>\n<li><strong>ohe (OneHotEncoder):</strong>  The fitted one-hot-encoder.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DataFrame: The data where all categorical columns were encoded using the <code>ohe</code>.</p>\n</blockquote>\n", "signature": "(\n    X: pandas.core.frame.DataFrame,\n    ohe: sklearn.preprocessing._encoders.OneHotEncoder\n) -> pandas.core.frame.DataFrame", "funcdef": "def"}, {"fullname": "exdpn.decisionpoints", "modulename": "exdpn.decisionpoints", "type": "module", "doc": "<p>This is a module providing the functionallity to get all decision points from a Petri net. </p>\n\n<hr />\n\n<h2 id=\"decision-points\">Decision Points</h2>\n\n<p>A decision point is a place in the Petri net with at least two outgoing transitions (i.e., arcs to transitions).</p>\n\n<hr />\n"}, {"fullname": "exdpn.decisionpoints.find", "modulename": "exdpn.decisionpoints.find", "type": "module", "doc": "<p>This is a module providing the functionallity to get all decision points from a Petri net. </p>\n\n<hr />\n\n<h2 id=\"decision-points\">Decision Points</h2>\n\n<p>A decision point is a place in the Petri net with at least two outgoing transitions (i.e., arcs to transitions).</p>\n\n<hr />\n"}, {"fullname": "exdpn.decisionpoints.find.find_decision_points", "modulename": "exdpn.decisionpoints.find", "qualname": "find_decision_points", "type": "function", "doc": "<p>Finds decision points in a Petri net. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>net (PetriNet):</strong>  The pm4py Petri net in which to find decision points.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[PetriNet.Place, Set[PetriNet.Transition]]: A dictionary mapping places to the possible outgoing transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.decisionpoints</span> <span class=\"kn\">import</span> <span class=\"n\">find_decision_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>        \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dict</span> <span class=\"o\">=</span> <span class=\"n\">find_decision_points</span><span class=\"p\">(</span><span class=\"n\">pn</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dp_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n<span class=\"go\">dict_keys([({&#39;create purchase order&#39;}, {&#39;request manager approval&#39;, &#39;request standard approval&#39;}), ({&#39;request standard approval&#39;}, {&#39;approve purchase&#39;, &#39;reject purchase&#39;}), ({&#39;request manager approval&#39;}, {&#39;manager approve purchase&#39;, &#39;manager reject purchase&#39;})])</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    net: pm4py.objects.petri_net.obj.PetriNet\n) -> Dict[pm4py.objects.petri_net.obj.PetriNet.Place, Set[pm4py.objects.petri_net.obj.PetriNet.Transition]]", "funcdef": "def"}, {"fullname": "exdpn.guard_datasets", "modulename": "exdpn.guard_datasets", "type": "module", "doc": "<p>This module provides the function to extract a dataset for each decision point in a Petri net given an event log and attributes to record.</p>\n\n<hr />\n\n<h2 id=\"guard-datasets\">Guard-Datasets</h2>\n\n<p>Each row/instance in a guard-dataset corresponds to a trace visiting the corresponding decision point (see module <code>exdpn.decisionpoints</code>) during token-based replay. This could potentially happen several times. For each such visit, the algorithm records the specified case-level attributes, event-level attributes (for the previous event in the case), and a tail of preceding events. These records make up the columns of the guard-dataset. In order to eventually do predictions with the data, the following event (i.e., transition) is recorded in the \"target\" column.</p>\n\n<hr />\n"}, {"fullname": "exdpn.guard_datasets.data_extraction", "modulename": "exdpn.guard_datasets.data_extraction", "type": "module", "doc": "<p>This module provides the function to extract a dataset for each decision point in a Petri net given an event log and attributes to record.</p>\n\n<hr />\n\n<h2 id=\"guard-datasets\">Guard-Datasets</h2>\n\n<p>Each row/instance in a guard-dataset corresponds to a trace visiting the corresponding decision point (see module <code>exdpn.decisionpoints</code>) during token-based replay. This could potentially happen several times. For each such visit, the algorithm records the specified case-level attributes, event-level attributes (for the previous event in the case), and a tail of preceding events. These records make up the columns of the guard-dataset. In order to eventually do predictions with the data, the following event (i.e., transition) is recorded in the \"target\" column.</p>\n\n<hr />\n"}, {"fullname": "exdpn.guard_datasets.data_extraction.extract_all_datasets", "modulename": "exdpn.guard_datasets.data_extraction", "qualname": "extract_all_datasets", "type": "function", "doc": "<p>Extracts a dataset for each decision point using token-based replay. For each instance of this decision found in the log, the following data is extracted:</p>\n\n<ol>\n<li>The specified case-level attributes of the case</li>\n<li>The specified event-level attributes of the last event of the case before this decision is made</li>\n<li>The acitivities executed in the events contained in the <code>tail_length</code> events before the decision</li>\n<li>The transition which is chosen (the <em>target</em> class)</li>\n</ol>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The event log to extract the data from.</li>\n<li><strong>net (PetriNet):</strong>  The Petri net on which the token-based replay will be performed and on which the decision points.</li>\n<li><strong>initial_marking (Marking):</strong>  The initial marking of the Petri net.</li>\n<li><strong>final_marking (Marking):</strong>  The final marking of the Petri net.</li>\n<li><strong>case_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on a case-level. Defaults to empty list.</li>\n<li><strong>event_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on an event-level. Defaults to empty list.</li>\n<li><strong>tail_length (int, optional):</strong>  The number of preceding events to record. Defaults to 3.</li>\n<li><strong>activityName_key (str, optional):</strong>  The key of the activity name in the event log. Defaults to <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"concept:name\").</li>\n<li><strong>places (List[Place], optional):</strong>  The list of places to extract datasets for. If not present, all decision points are regarded.</li>\n<li><strong>padding (Any, optional):</strong>  The padding to be used when the tail goes over beginning of the case. Defaults to \"#\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[Place, DataFrame]: The dictionary mapping places in the Petri net to their corresponding dataset.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    log: pm4py.objects.log.obj.EventLog,\n    net: pm4py.objects.petri_net.obj.PetriNet,\n    initial_marking: pm4py.objects.petri_net.obj.Marking,\n    final_marking: pm4py.objects.petri_net.obj.Marking,\n    case_level_attributes: List[str] = [],\n    event_level_attributes: List[str] = [],\n    tail_length: int = 3,\n    activityName_key: str = 'concept:name',\n    places: List[pm4py.objects.petri_net.obj.PetriNet.Place] = None,\n    padding: Any = '#'\n) -> Dict[pm4py.objects.petri_net.obj.PetriNet.Place, pandas.core.frame.DataFrame]", "funcdef": "def"}, {"fullname": "exdpn.guard_datasets.data_extraction.extract_dataset_for_place", "modulename": "exdpn.guard_datasets.data_extraction", "qualname": "extract_dataset_for_place", "type": "function", "doc": "<p>Extracts the dataset for a single place using token-based replay. For each instance of this decision found in the log, the following data is extracted:</p>\n\n<ol>\n<li>The specified case-level attributes of the case</li>\n<li>The specified event-level attributes of the last event of the case before this decision is made</li>\n<li>The acitivities executed in the events contained in the <code>tail_length</code> events before the decision</li>\n<li>The transition which is chosen (the <em>target</em> class)</li>\n</ol>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>place (PetriNet.Place):</strong>  The place for which to extract the data.</li>\n<li><strong>target_transitions (Dict[PetriNet.Place, PetriNet.Transition]):</strong>  The transitions which have an input arc from this place.</li>\n<li><strong>log (EventLog):</strong>  The Event Log from which to extract the data.</li>\n<li><strong>replay (List[Dict[str, Any]] | Tuple[PetriNet, Marking, Marking]):</strong>  Either the token-based replay computed by PM4Py, or the net which to use to compute the replay.</li>\n<li><strong>case_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on a case-level. Defaults to empty list.</li>\n<li><strong>event_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on an event-level. Defaults to empty list.</li>\n<li><strong>tail_length (int, optional):</strong>  The number of preceding events to record. Defaults to 3.</li>\n<li><strong>activityName_key (str, optional):</strong>  The key of the activity name in the event log. Defaults to <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"concept:name\").</li>\n<li><strong>padding (Any, optional):</strong>  The padding to be used when the tail goes over beginning of the case. Defaults to \"#\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DataFrame: The guard-dataset extracted for the decision point at <code>place</code>.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the default case ID key defined by the XES standard (\"concept:name\") is not among the case-level attributes.</li>\n</ul>\n", "signature": "(\n    place: pm4py.objects.petri_net.obj.PetriNet.Place,\n    target_transitions: Dict[pm4py.objects.petri_net.obj.PetriNet.Place, pm4py.objects.petri_net.obj.PetriNet.Transition],\n    log: pm4py.objects.log.obj.EventLog,\n    replay: Union[List[Dict[str, Any]], Tuple[pm4py.objects.petri_net.obj.PetriNet, pm4py.objects.petri_net.obj.Marking, pm4py.objects.petri_net.obj.Marking]],\n    case_level_attributes: List[str] = [],\n    event_level_attributes: List[str] = [],\n    tail_length: int = 3,\n    activityName_key: str = 'concept:name',\n    padding: Any = '#'\n) -> pandas.core.frame.DataFrame", "funcdef": "def"}, {"fullname": "exdpn.guard_datasets.data_extraction.extract_current_decisions", "modulename": "exdpn.guard_datasets.data_extraction", "qualname": "extract_current_decisions", "type": "function", "doc": "<p>Extracts the current decisions of an event log.         These are all current decisons of unfinished cases.         Unfinished cases are identified as the unfit traces which can perfectly be replayed on the model, but do not reach a final marking in token-based replay.         Current decisions of an unfit trace arise at those places which have enabled transitions in the token based replay-marking         and correspond to the latest instance of such a trace.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The event log to extract the data from.</li>\n<li><strong>net (PetriNet):</strong>  The Petri net on which the token-based replay will be performed and on which the decision points.</li>\n<li><strong>initial_marking (Marking):</strong>  The initial marking of the Petri net.</li>\n<li><strong>final_marking (Marking):</strong>  The final marking of the Petri net.</li>\n<li><strong>case_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on a case-level. Defaults to empty list.</li>\n<li><strong>event_level_attributes (List[str], optional):</strong>  The list of attributes to be extracted on an event-level. Defaults to empty list.</li>\n<li><strong>tail_length (int, optional):</strong>  The number of preceding events to record the activity of. Defaults to 3.</li>\n<li><strong>activityName_key (str, optional):</strong>  The key of the activity name in the event log. Defaults to <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"concept:name\").</li>\n<li><strong>places (List[Place], optional):</strong>  The list of places to extract datasets for. If not present, all decision points are regarded.</li>\n<li><strong>padding (Any, optional):</strong>  The padding to be used when the tail goes over beginning of the case. Defaults to \"#\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[Place, DataFrame]: The dictionary mapping places from <code>places</code> to their corresponding dataset of current decisions.</p>\n</blockquote>\n", "signature": "(\n    log: pm4py.objects.log.obj.EventLog,\n    net: pm4py.objects.petri_net.obj.PetriNet,\n    initial_marking: pm4py.objects.petri_net.obj.Marking,\n    final_marking: pm4py.objects.petri_net.obj.Marking,\n    case_level_attributes: List[str] = [],\n    event_level_attributes: List[str] = [],\n    tail_length: int = 3,\n    activityName_key: str = 'concept:name',\n    places: List[pm4py.objects.petri_net.obj.PetriNet.Place] = None,\n    padding: Any = '#'\n) -> Dict[pm4py.objects.petri_net.obj.PetriNet.Place, pandas.core.frame.DataFrame]", "funcdef": "def"}, {"fullname": "exdpn.guard_datasets.data_extraction.extract_current_decision_for_trace", "modulename": "exdpn.guard_datasets.data_extraction", "qualname": "extract_current_decision_for_trace", "type": "function", "doc": "<p>Extract prediction information for a trace.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>trace (Trace):</strong>  The trace to extract the data from.</li>\n<li><strong>case_level_attributes (List[str], optional):</strong>  The case-level attributes to extract from the last event of the case. Defaults to the empty list.</li>\n<li><strong>event_level_attributes (List[str], optional):</strong>  The event-level attributes to extract from the last event of the case. Defaults to the empty list.</li>\n<li><strong>tail_length (int, optional):</strong>  The number of preceding events to record the activity of. Defaults to 3.</li>\n<li><strong>activityName_key (str, optional):</strong>   The key of the activity name in the event log. Defaults to <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"concept:name\").</li>\n<li><strong>padding (Any, optional):</strong>  The padding to be used when the tail goes over beginning of the case. Defaults to \"#\".</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If a case in the event log has no case-id, an error is raised.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[Any, List[Any]]: A tuple containing the index for the dataframe (the case-ID) and the list of extracted values.</p>\n</blockquote>\n", "signature": "(\n    trace: pm4py.objects.log.obj.Trace,\n    case_level_attributes: List[str] = [],\n    event_level_attributes: List[str] = [],\n    tail_length: int = 3,\n    activityName_key: str = 'concept:name',\n    padding: Any = '#'\n) -> Tuple[Any, List[Any]]", "funcdef": "def"}, {"fullname": "exdpn.guards", "modulename": "exdpn.guards", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard-manager\">Guard Manager</h1>\n\n<p>The guard manager is called for each decision point to get the best possible guard model for either the default machine learning techniques (all implemented) or the selected machine learning techniques.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. The implemented machine learning techniques are: \n<code>exdpn.guards.decision_tree_guard</code>, <code>exdpn.guards.logistic_regression_guard</code>, <code>exdpn.guards.svm_guard</code>, and <code>exdpn.guards.neural_network_guard</code>.</p>\n\n<hr />\n"}, {"fullname": "exdpn.guards.decision_tree_guard", "modulename": "exdpn.guards.decision_tree_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.__init__", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.__init__", "type": "function", "doc": "<p>Initializes a decision tree based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the classifier.</li>\n<li><strong>random_state (int, optional):</strong>  The random state to be used for algorithms wherever possible. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If supplied hyperparameters are invalid.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    hyperparameters: Dict[str, Any] = {'min_impurity_decrease': 0.0075},\n    random_state: int = None\n)", "funcdef": "def"}, {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.train", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.train", "type": "function", "doc": "<p>Trains the decision tree guard using the dataset and the specified hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the classifier behind the guard.</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.predict", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Dataset of input instances used to predict the target variable, i.e., the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.is_explainable", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_explainable_representation", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the decision tree guard.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame, optional):</strong>  <em>Not needed for Explainable Representation of Decision Trees</em> </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Matplotlib Figure of the trained decision tree classifier.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Decision_Tree_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Decision_Tree_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># return figure of explainable representation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">()</span> <span class=\"c1\"># results may deviate </span>\n</code></pre></div>\n  \n  <p><img src=\"../../images/dt-example-representation.svg\" alt=\"Example explainable representation of a decision tree guard\" style=\"max-height: 350px;\"/></p>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For an example of the explainable representations of all machine learning techniques please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame] = None\n) -> matplotlib.figure.Figure", "funcdef": "def"}, {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_global_explanations", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.get_global_explanations", "type": "function", "doc": "<p>Get a global explainable representation for the concrete machine learning classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the global explainable representations. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Decision Tree\"</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, Union[matplotlib.figure.Figure, str]]", "funcdef": "def"}, {"fullname": "exdpn.guards.decision_tree_guard.Decision_Tree_Guard.get_local_explanations", "modulename": "exdpn.guards.decision_tree_guard", "qualname": "Decision_Tree_Guard.get_local_explanations", "type": "function", "doc": "<p>Local Representations are not supported for Decision Tree. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>local_data (DataFrame):</strong>  A dataframe containing the single decision situation.</li>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the explainable representations for the single decision situation. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Decision plot (Multioutput)\"</li>\n  <li>\"Decision plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    local_data: pandas.core.frame.DataFrame,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, matplotlib.figure.Figure]", "funcdef": "def"}, {"fullname": "exdpn.guards.guard", "modulename": "exdpn.guards.guard", "type": "module", "doc": "<p></p>\n"}, {"fullname": "exdpn.guards.guard.Guard", "modulename": "exdpn.guards.guard", "qualname": "Guard", "type": "class", "doc": "<p></p>\n"}, {"fullname": "exdpn.guards.guard.Guard.__init__", "modulename": "exdpn.guards.guard", "qualname": "Guard.__init__", "type": "function", "doc": "<p>Abstract class defining the guard interface.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  The hyperparameters used for the concrete machine learning classifier initialization.</li>\n<li><strong>random_state (int, optional):</strong>  The random state to be used for algorithms wherever possible. Defaults to None.</li>\n</ul>\n", "signature": "(self, hyperparameters: Dict[str, Any], random_state: Optional[int])", "funcdef": "def"}, {"fullname": "exdpn.guards.guard.Guard.train", "modulename": "exdpn.guards.guard", "qualname": "Guard.train", "type": "function", "doc": "<p>Train the concrete machine learning classifier using the provided dataset.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  The feature variables, used to train the classifier behind the guard.</li>\n<li><strong>y (DataFrame):</strong>  The target variable of the provided dataset.</li>\n</ul>\n\n<h6 id=\"note\">Note</h6>\n\n<blockquote>\n  <p>It is assumed that <code>y</code> corresponds to a list of <code>pm4py.objects.petri_net.obj.PetriNet.Transition</code> objects.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, {"fullname": "exdpn.guards.guard.Guard.predict", "modulename": "exdpn.guards.guard", "qualname": "Guard.predict", "type": "function", "doc": "<p>Uses the concrete machine learning classifier to predict a transition.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  The dataset of input instances used to predict the target variable.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The predicted transitions.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, {"fullname": "exdpn.guards.guard.Guard.is_explainable", "modulename": "exdpn.guards.guard", "qualname": "Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not the concrete machine learning classifier is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the concrete machine learning classifier is explainable.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "exdpn.guards.guard.Guard.get_explainable_representation", "modulename": "exdpn.guards.guard", "qualname": "Guard.get_explainable_representation", "type": "function", "doc": "<p>Return an explainable representation of the concrete machine learning classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame, optional):</strong>  Dataset of input instances used to construct an explainable representation (not needed for some techniques (Decision Trees)).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: The explainable representation of the concrete machine learning classifier.</p>\n</blockquote>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame]\n) -> matplotlib.figure.Figure", "funcdef": "def"}, {"fullname": "exdpn.guards.guard.Guard.get_global_explanations", "modulename": "exdpn.guards.guard", "qualname": "Guard.get_global_explanations", "type": "function", "doc": "<p>Get a global explainable representation for the concrete machine learning classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the global explainable representations. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Bar plot (Summary)\"</li>\n  <li>\"Beeswarm plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, Union[matplotlib.figure.Figure, str]]", "funcdef": "def"}, {"fullname": "exdpn.guards.guard.Guard.get_local_explanations", "modulename": "exdpn.guards.guard", "qualname": "Guard.get_local_explanations", "type": "function", "doc": "<p>Get explainable representations for a single decision situation. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>local_data (DataFrame):</strong>  A dataframe containing the single decision situation.</li>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the explainable representations for the single decision situation. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Decision plot (Multioutput)\"</li>\n  <li>\"Decision plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    local_data: pandas.core.frame.DataFrame,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, matplotlib.figure.Figure]", "funcdef": "def"}, {"fullname": "exdpn.guards.guard_manager", "modulename": "exdpn.guards.guard_manager", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard-manager\">Guard Manager</h1>\n\n<p>The guard manager is called for each decision point to get the best possible guard model for either the default machine learning techniques (all implemented) or the selected machine learning techniques.</p>\n\n<hr />\n"}, {"fullname": "exdpn.guards.guard_manager.Guard_Manager", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager", "type": "class", "doc": "<p></p>\n"}, {"fullname": "exdpn.guards.guard_manager.Guard_Manager.__init__", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager.__init__", "type": "function", "doc": "<p>Initializes all information needed for the calculation of the best guard for each decision point and /\nreturns a dictionary with the list of all guards for each machine learning technique.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>dataframe (DataFrame):</strong>  Dataset used to evaluate the guard.</li>\n<li><strong>ml_list (List[ML_Technique]):</strong>  List of all machine learning techniques that should be evaluated, default is all implemented.</li>\n<li><strong>hyperparameters (Dict[ML_Technique, Dict[str, Any]]):</strong>  Hyperparameters that should be used for the machine learning techniques,                 if not specified, standard/generic parameters are used.</li>\n<li><strong>CV_splits (int):</strong>  Number of folds to use in stratified corss-validation, defaults to 5.</li>\n<li><strong>CV_shuffle (bool):</strong>  Shuffle samples before splitting, defaults to False.</li>\n<li><strong>random_state (int, optional):</strong>  The random state to be used for algorithms wherever possible. Defaults to None.</li>\n<li><strong>impute (bool):</strong>  If <code>True</code>, missing attribute values in the guard datasets will be imputed using constants and an indicator columns will be added. Default is <code>False</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create a guard manager for that decision point</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager</span> <span class=\"o\">=</span> <span class=\"n\">guards</span><span class=\"o\">.</span><span class=\"n\">Guard_Manager</span><span class=\"p\">(</span><span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    dataframe: pandas.core.frame.DataFrame,\n    ml_list: List[exdpn.guards.ml_technique.ML_Technique] = [<ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>, <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>, <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>, <ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>, <ML_Technique.XGB: <class 'exdpn.guards.xgboost_guard.XGBoost_Guard'>>, <ML_Technique.RF: <class 'exdpn.guards.random_forest_guard.Random_Forest_Guard'>>],\n    hyperparameters: Dict[exdpn.guards.ml_technique.ML_Technique, Dict[str, Any]] = {<ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>: {'max_iter': 20000, 'learning_rate_init': 0.0001, 'hidden_layer_sizes': (10, 5), 'alpha': 0.0001}, <ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>: {'min_impurity_decrease': 0.0075}, <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>: {'C': 0.1375, 'tol': 0.001}, <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>: {'C': 0.3, 'tol': 0.001}, <ML_Technique.XGB: <class 'exdpn.guards.xgboost_guard.XGBoost_Guard'>>: {'max_depth': 2, 'n_estimators': 50}, <ML_Technique.RF: <class 'exdpn.guards.random_forest_guard.Random_Forest_Guard'>>: {'max_depth': 5}},\n    CV_splits: int = 5,\n    CV_shuffle: bool = False,\n    random_state: int = None,\n    impute: bool = False\n)", "funcdef": "def"}, {"fullname": "exdpn.guards.guard_manager.Guard_Manager.train_test", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager.train_test", "type": "function", "doc": "<p>Calculates for a given decision point all selected guards and returns the precision of the machine learning model,             using the specified machine learning techniques.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str, Any]: Returns a mapping of all selected machine learning techniques                 to the achieved F1-score.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create a guard manager for that decision point</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager</span> <span class=\"o\">=</span> <span class=\"n\">guards</span><span class=\"o\">.</span><span class=\"n\">Guard_Manager</span><span class=\"p\">(</span><span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager_results</span> <span class=\"o\">=</span> <span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">train_test</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> Dict[str, Any]", "funcdef": "def"}, {"fullname": "exdpn.guards.guard_manager.Guard_Manager.get_best", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager.get_best", "type": "function", "doc": "<p>Returns \"best\" guard for a decision point (see <code>train_test</code>).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>best_guard_name (str): The name of the best performing guard.</li>\n  <li>best_guard (Guard): The corresponding guard object with the best performance.</li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If <code>train_test</code> has not been called yet.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp_key</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create a guard manager for that decision point</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager</span> <span class=\"o\">=</span> <span class=\"n\">guards</span><span class=\"o\">.</span><span class=\"n\">Guard_Manager</span><span class=\"p\">(</span><span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager_results</span> <span class=\"o\">=</span> <span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">train_test</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">best_guard</span> <span class=\"o\">=</span> <span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">get_best</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Name of best guard:&quot;</span><span class=\"p\">,</span> <span class=\"n\">best_guard</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"go\">Name of best guard: Decision Tree</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> Tuple[str, exdpn.guards.guard.Guard]", "funcdef": "def"}, {"fullname": "exdpn.guards.guard_manager.Guard_Manager.get_comparison_plot", "modulename": "exdpn.guards.guard_manager", "qualname": "Guard_Manager.get_comparison_plot", "type": "function", "doc": "<p>Constructs a comparison bar plot of the F1 scores for all trained techniques.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: The bar plot figure.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">guards</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create a guard manager for that decision point</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager</span> <span class=\"o\">=</span> <span class=\"n\">guards</span><span class=\"o\">.</span><span class=\"n\">Guard_Manager</span><span class=\"p\">(</span><span class=\"n\">dataframe</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard_manager_results</span> <span class=\"o\">=</span> <span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">train_test</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># return comparision plot</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">guard_manager</span><span class=\"o\">.</span><span class=\"n\">get_comparison_plot</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p><img src=\"../../images/comparision-plot.svg\" alt=\"Comparision plot of the performance of the used machine learning techniques\" style=\"max-height: 350px;\"/></p>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For an example of the explainable representations of all machine learning techniques please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(self) -> matplotlib.figure.Figure", "funcdef": "def"}, {"fullname": "exdpn.guards.logistic_regression_guard", "modulename": "exdpn.guards.logistic_regression_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.__init__", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.__init__", "type": "function", "doc": "<p>Initializes a logistic regression based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the classifier.</li>\n<li><strong>random_state (int, optional):</strong>  The random state to be used for algorithms wherever possible. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If supplied hyperparameters are invalid.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    hyperparameters: Dict[str, Any] = {'C': 0.1375, 'tol': 0.001},\n    random_state: int = None\n)", "funcdef": "def"}, {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.train", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.train", "type": "function", "doc": "<p>Trains the logistic regression guard using the dataset and the specified hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the classifier behind the guard.</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.predict", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Dataset of input instances used to predict the target variable, i.e., the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.is_explainable", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_explainable_representation", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the logistic regression guard, a Matplotlib plot using SHAP.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame):</strong>  Dataset of input instances used to construct an explainable representation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Matplotlib Figure of the trained logistic regression model.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Logistic_Regression_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Logistic_Regression_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># return figure of explainable representation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span> <span class=\"c1\"># results may deviate </span>\n</code></pre></div>\n  \n  <p><img src=\"../../images/lr-example-representation.svg\" alt=\"Example explainable representation of a logistic regression guard\" style=\"max-height: 350px;\"/></p>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For an example of the explainable representations of all machine learning techniques please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame]\n) -> matplotlib.figure.Figure", "funcdef": "def"}, {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_global_explanations", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.get_global_explanations", "type": "function", "doc": "<p>Get a global explainable representation for the concrete machine learning classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the global explainable representations. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Bar plot (Summary)\"</li>\n  <li>\"Beeswarm plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, Union[matplotlib.figure.Figure, str]]", "funcdef": "def"}, {"fullname": "exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard.get_local_explanations", "modulename": "exdpn.guards.logistic_regression_guard", "qualname": "Logistic_Regression_Guard.get_local_explanations", "type": "function", "doc": "<p>Get explainable representations for a single decision situation. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>local_data (DataFrame):</strong>  A dataframe containing the single decision situation.</li>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the explainable representations for the single decision situation. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Decision plot (Multioutput)\"</li>\n  <li>\"Decision plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    local_data: pandas.core.frame.DataFrame,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, matplotlib.figure.Figure]", "funcdef": "def"}, {"fullname": "exdpn.guards.ml_technique", "modulename": "exdpn.guards.ml_technique", "type": "module", "doc": "<p></p>\n"}, {"fullname": "exdpn.guards.ml_technique.ML_Technique", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique", "type": "class", "doc": "<p>This enum acts as a selector for guard classes which correspond to different machine learning classifiers.</p>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <p>Creating a data Petri net (see <code>exdpn.data_petri_net.data_petri_net.Data_Petri_Net</code>)             with only decision tree-based guards can be done using the ml_list parameter a list containing only <code>DT</code>:</p>\n  \n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">data_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">data_petri_net</span><span class=\"o\">.</span><span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">ml_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                                    <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "exdpn.guards.ml_technique.ML_Technique.NN", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.NN", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a neural network classifier.</p>\n", "default_value": " = <ML_Technique.NN: <class 'exdpn.guards.neural_network_guard.Neural_Network_Guard'>>"}, {"fullname": "exdpn.guards.ml_technique.ML_Technique.DT", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.DT", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a decision tree classifier.</p>\n", "default_value": " = <ML_Technique.DT: <class 'exdpn.guards.decision_tree_guard.Decision_Tree_Guard'>>"}, {"fullname": "exdpn.guards.ml_technique.ML_Technique.LR", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.LR", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a logistic regression classifier.</p>\n", "default_value": " = <ML_Technique.LR: <class 'exdpn.guards.logistic_regression_guard.Logistic_Regression_Guard'>>"}, {"fullname": "exdpn.guards.ml_technique.ML_Technique.SVM", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.SVM", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a support vector machine classifier.</p>\n", "default_value": " = <ML_Technique.SVM: <class 'exdpn.guards.svm_guard.SVM_Guard'>>"}, {"fullname": "exdpn.guards.ml_technique.ML_Technique.XGB", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.XGB", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a XGBoost classifier.</p>\n", "default_value": " = <ML_Technique.XGB: <class 'exdpn.guards.xgboost_guard.XGBoost_Guard'>>"}, {"fullname": "exdpn.guards.ml_technique.ML_Technique.RF", "modulename": "exdpn.guards.ml_technique", "qualname": "ML_Technique.RF", "type": "variable", "doc": "<p>Corresponds to the guard implementation using a random forest classifier.</p>\n", "default_value": " = <ML_Technique.RF: <class 'exdpn.guards.random_forest_guard.Random_Forest_Guard'>>"}, {"fullname": "exdpn.guards.model_builder", "modulename": "exdpn.guards.model_builder", "type": "module", "doc": "<p></p>\n"}, {"fullname": "exdpn.guards.model_builder.model_builder", "modulename": "exdpn.guards.model_builder", "qualname": "model_builder", "type": "function", "doc": "<p>Internal function to build a specific guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>model_type (ML_Technique):</strong>  Specification of machine learning technique (see <code>exdpn.guards.ml_technique.ML_Technique</code>).</li>\n<li><strong>hp (Dict[str, any]):</strong>  Hyperparameters for the machine learning model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Guard: Machine learning guard of desired type with provided hyperparameters.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If entered model type is not supported.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards.model_builder</span> <span class=\"kn\">import</span> <span class=\"n\">model_builder</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">ML_Technique</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">decision_tree_guard</span> <span class=\"o\">=</span> <span class=\"n\">model_builder</span><span class=\"p\">(</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">DT</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;min_impurity_decrease&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.0075</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">logistic_regression_guard</span> <span class=\"o\">=</span> <span class=\"n\">model_builder</span><span class=\"p\">(</span><span class=\"n\">ML_Technique</span><span class=\"o\">.</span><span class=\"n\">LR</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">&#39;C&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.1375</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tol&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.001</span><span class=\"p\">})</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    model_type: exdpn.guards.ml_technique.ML_Technique,\n    hp: Dict[str, Any]\n) -> exdpn.guards.guard.Guard", "funcdef": "def"}, {"fullname": "exdpn.guards.neural_network_guard", "modulename": "exdpn.guards.neural_network_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.__init__", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.__init__", "type": "function", "doc": "<p>Initializes a neural network based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the classifier.</li>\n<li><strong>random_state (int, optional):</strong>  The random state to be used for algorithms wherever possible. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If supplied hyperparameters are invalid</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    hyperparameters: Dict[str, Any] = {'hidden_layer_sizes': (10, 5), 'learning_rate_init': 0.0001, 'alpha': 0.0001, 'max_iter': 2000},\n    random_state: int = None\n)", "funcdef": "def"}, {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.train", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.train", "type": "function", "doc": "<p>Trains the neural network guard using the dataset and the specified hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the classifier behind the guard .</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.predict", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Dataset of input instances used to predict the target variable, i.e., the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.is_explainable", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_explainable_representation", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the neural network guard, a Matplotlib plot using SHAP. For Neural Networks, as the calculation of the SHAP values can be very time-consuming, we recommend using sampled or aggregated (clustered) data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame):</strong>  Dataset of input instances used to construct an explainable representation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Explainable representation of the guard.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># sample from test data, as explainable representation of NN is computationally expensive</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sampled_test_data</span> <span class=\"o\">=</span> <span class=\"n\">X_test</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)));</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># return figure of explainable representation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">(</span><span class=\"n\">sampled_test_data</span><span class=\"p\">)</span> <span class=\"c1\"># results may deviate </span>\n</code></pre></div>\n  \n  <p><img src=\"../../images/nn-example-representation.svg\" alt=\"Example explainable representation of a neural network guard\" style=\"max-height: 350px;\"/></p>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For an example of the explainable representations of all machine learning techniques please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame]\n) -> matplotlib.figure.Figure", "funcdef": "def"}, {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_global_explanations", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.get_global_explanations", "type": "function", "doc": "<p>Get a global explainable representation for the concrete machine learning classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the global explainable representations. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Bar plot (Summary)\"</li>\n  <li>\"Beeswarm plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, Union[matplotlib.figure.Figure, str]]", "funcdef": "def"}, {"fullname": "exdpn.guards.neural_network_guard.Neural_Network_Guard.get_local_explanations", "modulename": "exdpn.guards.neural_network_guard", "qualname": "Neural_Network_Guard.get_local_explanations", "type": "function", "doc": "<p>Get explainable representations for a single decision situation. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>local_data (DataFrame):</strong>  A dataframe containing the single decision situation.</li>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the explainable representations for the single decision situation. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Decision plot (Multioutput)\"</li>\n  <li>\"Decision plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    local_data: pandas.core.frame.DataFrame,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, matplotlib.figure.Figure]", "funcdef": "def"}, {"fullname": "exdpn.guards.random_forest_guard", "modulename": "exdpn.guards.random_forest_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, {"fullname": "exdpn.guards.random_forest_guard.Random_Forest_Guard", "modulename": "exdpn.guards.random_forest_guard", "qualname": "Random_Forest_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, {"fullname": "exdpn.guards.random_forest_guard.Random_Forest_Guard.__init__", "modulename": "exdpn.guards.random_forest_guard", "qualname": "Random_Forest_Guard.__init__", "type": "function", "doc": "<p>Initializes a random forest based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the classifier.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If supplied hyperparameters are invalid.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Random_Forest_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Random_Forest_Guard</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    hyperparameters: Dict[str, Any] = {'max_depth': 5},\n    random_state: int = None\n)", "funcdef": "def"}, {"fullname": "exdpn.guards.random_forest_guard.Random_Forest_Guard.train", "modulename": "exdpn.guards.random_forest_guard", "qualname": "Random_Forest_Guard.train", "type": "function", "doc": "<p>Trains the decision tree guard using the dataset and the specified hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the classifier behind the guard.</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Random_Forest_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Random_Forest_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, {"fullname": "exdpn.guards.random_forest_guard.Random_Forest_Guard.predict", "modulename": "exdpn.guards.random_forest_guard", "qualname": "Random_Forest_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Dataset of input instances used to predict the target variable, i.e., the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Random_Forest_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">k</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Random_Forest_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, {"fullname": "exdpn.guards.random_forest_guard.Random_Forest_Guard.is_explainable", "modulename": "exdpn.guards.random_forest_guard", "qualname": "Random_Forest_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">Random_Forest_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">Random_Forest_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "exdpn.guards.random_forest_guard.Random_Forest_Guard.get_explainable_representation", "modulename": "exdpn.guards.random_forest_guard", "qualname": "Random_Forest_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the support vector machine guard, a Matplotlib plot using SHAP.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame):</strong>  Dataset of input instances used to construct an explainable representation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Matplotlib Figure of the trained support vector machine model.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">SVM_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">SVM_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># return figure of explainable representation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p><img src=\"../../images/rf-example-representation.svg\" alt=\"Example explainable representation of a support vector machine guard\" style=\"max-height: 350px;\"/>\n  For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For an example of the explainable representations of all machine learning techniques please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame]\n) -> matplotlib.figure.Figure", "funcdef": "def"}, {"fullname": "exdpn.guards.random_forest_guard.Random_Forest_Guard.get_global_explanations", "modulename": "exdpn.guards.random_forest_guard", "qualname": "Random_Forest_Guard.get_global_explanations", "type": "function", "doc": "<p>Get a global explainable representation for the concrete machine learning classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the global explainable representations. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Bar plot (Summary)\"</li>\n  <li>\"Beeswarm plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, Union[matplotlib.figure.Figure, str]]", "funcdef": "def"}, {"fullname": "exdpn.guards.random_forest_guard.Random_Forest_Guard.get_local_explanations", "modulename": "exdpn.guards.random_forest_guard", "qualname": "Random_Forest_Guard.get_local_explanations", "type": "function", "doc": "<p>Get explainable representations for a single decision situation. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>local_data (DataFrame):</strong>  A dataframe containing the single decision situation.</li>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the explainable representations for the single decision situation. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Decision plot (Multioutput)\"</li>\n  <li>\"Decision plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    local_data: pandas.core.frame.DataFrame,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, matplotlib.figure.Figure]", "funcdef": "def"}, {"fullname": "exdpn.guards.svm_guard", "modulename": "exdpn.guards.svm_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, {"fullname": "exdpn.guards.svm_guard.SVM_Guard", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, {"fullname": "exdpn.guards.svm_guard.SVM_Guard.__init__", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.__init__", "type": "function", "doc": "<p>Initializes a support vector machine based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the classifier.</li>\n<li><strong>random_state (int, optional):</strong>  The random state to be used for algorithms wherever possible. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If the supplied hyperparameters are invalid.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <blockquote>\n        <p>from exdpn.guards import SVM_Guard\n        guard = SVM_Guard()</p>\n      </blockquote>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n", "signature": "(\n    self,\n    hyperparameters: Dict[str, Any] = {'C': 0.3, 'tol': 0.001},\n    random_state: int = None\n)", "funcdef": "def"}, {"fullname": "exdpn.guards.svm_guard.SVM_Guard.train", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.train", "type": "function", "doc": "<p>Trains the support vector machine guard using the dataset and the specified hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the classifier behind the guard.</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">SVM_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">SVM_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, {"fullname": "exdpn.guards.svm_guard.SVM_Guard.predict", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Input instances used to predict the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">SVM_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">SVM_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, {"fullname": "exdpn.guards.svm_guard.SVM_Guard.is_explainable", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">SVM_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">SVM_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "exdpn.guards.svm_guard.SVM_Guard.get_explainable_representation", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the support vector machine guard, a Matplotlib plot using SHAP.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame):</strong>  Dataset of input instances used to construct an explainable representation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Matplotlib Figure of the trained support vector machine model.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">SVM_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certrain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">SVM_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># return figure of explainable representation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p><img src=\"../../images/svm-example-representation.svg\" alt=\"Example explainable representation of a support vector machine guard\" style=\"max-height: 350px;\"/></p>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For an example of the explainable representations of all machine learning techniques please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame]\n) -> matplotlib.figure.Figure", "funcdef": "def"}, {"fullname": "exdpn.guards.svm_guard.SVM_Guard.get_global_explanations", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.get_global_explanations", "type": "function", "doc": "<p>Get a global explainable representation for the concrete machine learning classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the global explainable representations. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Bar plot (Summary)\"</li>\n  <li>\"Beeswarm plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, Union[matplotlib.figure.Figure, str]]", "funcdef": "def"}, {"fullname": "exdpn.guards.svm_guard.SVM_Guard.get_local_explanations", "modulename": "exdpn.guards.svm_guard", "qualname": "SVM_Guard.get_local_explanations", "type": "function", "doc": "<p>Get explainable representations for a single decision situation. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>local_data (DataFrame):</strong>  A dataframe containing the single decision situation.</li>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the explainable representations for the single decision situation. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Decision plot (Multioutput)\"</li>\n  <li>\"Decision plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    local_data: pandas.core.frame.DataFrame,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, matplotlib.figure.Figure]", "funcdef": "def"}, {"fullname": "exdpn.guards.xgboost_guard", "modulename": "exdpn.guards.xgboost_guard", "type": "module", "doc": "<p>This module contains the functionality to create different machine learning guards to model the behavior at decision points as well as an guard manager to automatically handle the guard training and selection for each decision point.</p>\n\n<hr />\n\n<h1 id=\"guard\">Guard</h1>\n\n<p>A guard is in this case a machine learning model which aims to model the behavior on a decision point. The goal is to receive a classification model which predicts the transition following a certain decision point using the data contained in the given event log. To get a better understanding on how the model works and provide a better understanding all machine learning techniques return an explainable representation of the fitted model. </p>\n\n<hr />\n"}, {"fullname": "exdpn.guards.xgboost_guard.XGBoost_Guard", "modulename": "exdpn.guards.xgboost_guard", "qualname": "XGBoost_Guard", "type": "class", "doc": "<p></p>\n", "bases": "exdpn.guards.guard.Guard"}, {"fullname": "exdpn.guards.xgboost_guard.XGBoost_Guard.__init__", "modulename": "exdpn.guards.xgboost_guard", "qualname": "XGBoost_Guard.__init__", "type": "function", "doc": "<p>Initializes a XGBoost based guard with the provided hyperparameters.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>hyperparameters (Dict[str, Any]):</strong>  Hyperparameters used for the XGBoost classifier.</li>\n<li><strong>random_state (int, optional):</strong>  The random state to be used for algorithms wherever possible. Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If supplied hyperparameters are invalid.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">XGBoost_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">XGBoost_Guard</span><span class=\"p\">()</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    hyperparameters: Dict[str, Any] = {'max_depth': 2, 'n_estimators': 50},\n    random_state: int = None\n)", "funcdef": "def"}, {"fullname": "exdpn.guards.xgboost_guard.XGBoost_Guard.train", "modulename": "exdpn.guards.xgboost_guard", "qualname": "XGBoost_Guard.train", "type": "function", "doc": "<p>Trains the XGBoost guard using the dataset.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>X (DataFrame):</strong>  Feature variables of the provided dataset, used to train the XGBoost classifier.</li>\n<li><strong>y (DataFrame):</strong>  Target variable of the provided dataset, is to be predicted using <code>X</code>.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">XGBoost_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">XGBoost_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    X: pandas.core.frame.DataFrame,\n    y: pandas.core.frame.DataFrame\n) -> None", "funcdef": "def"}, {"fullname": "exdpn.guards.xgboost_guard.XGBoost_Guard.predict", "modulename": "exdpn.guards.xgboost_guard", "qualname": "XGBoost_Guard.predict", "type": "function", "doc": "<p>Predicts the next transition based on the input instances.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>input_instances (DataFrame):</strong>  Dataset of input instances used to predict the target variable, i.e., the next transition.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List[PetriNet.Transition]: The list of predicted transitions.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">XGBoost_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">XGBoost_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    self,\n    input_instances: pandas.core.frame.DataFrame\n) -> List[pm4py.objects.petri_net.obj.PetriNet.Transition]", "funcdef": "def"}, {"fullname": "exdpn.guards.xgboost_guard.XGBoost_Guard.is_explainable", "modulename": "exdpn.guards.xgboost_guard", "qualname": "XGBoost_Guard.is_explainable", "type": "function", "doc": "<p>Returns whether or not this guard is explainable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: Whether or not the guard is explainable.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">XGBoost_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">XGBoost_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">is_explainable</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "exdpn.guards.xgboost_guard.XGBoost_Guard.get_explainable_representation", "modulename": "exdpn.guards.xgboost_guard", "qualname": "XGBoost_Guard.get_explainable_representation", "type": "function", "doc": "<p>Returns an explainable representation of the XGBoost guard.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>data (DataFrame, optional):</strong>  Dataset of input instances used to construct an explainable representation. </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Figure: Matplotlib Figure of the trained decision tree classifier.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception:</strong>  If the guard has no explainable representation.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">get_petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guard_datasets</span> <span class=\"kn\">import</span> <span class=\"n\">extract_all_datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.guards</span> <span class=\"kn\">import</span> <span class=\"n\">XGBoost_Guard</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">data_preprocessing_evaluation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset_map</span> <span class=\"o\">=</span> <span class=\"n\">extract_all_datasets</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"n\">pn</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                      <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;item_category&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_id&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;item_amount&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;supplier&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;total_price&#39;</span><span class=\"p\">],</span> \n<span class=\"gp\">... </span>                                      <span class=\"n\">activityName_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;concept:name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># select a certain decision point and the corresponding data set </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dp_dataset_map</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dp_dataset</span> <span class=\"o\">=</span> <span class=\"n\">dp_dataset_map</span><span class=\"p\">[</span><span class=\"n\">dp</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">data_preprocessing_evaluation</span><span class=\"p\">(</span><span class=\"n\">dp_dataset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span> <span class=\"o\">=</span> <span class=\"n\">XGBoost_Guard</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y_prediction</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># return figure of explainable representation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">guard</span><span class=\"o\">.</span><span class=\"n\">get_explainable_representation</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span> <span class=\"c1\"># results may deviate </span>\n</code></pre></div>\n  \n  <p><img src=\"../../images/xgb-example-representation.svg\" alt=\"Example explainable representation of a XGBoost guard\" style=\"max-height: 350px;\"/></p>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n\n<p>Note: \n    For an example of the explainable representations of all machine learning techniques please check <a href=\"https://github.com/aarkue/eXdpn/blob/main/docs/dpn_example.ipynb\">Data Petri Net Example</a>.</p>\n", "signature": "(\n    self,\n    data: Optional[pandas.core.frame.DataFrame] = None\n) -> matplotlib.figure.Figure", "funcdef": "def"}, {"fullname": "exdpn.guards.xgboost_guard.XGBoost_Guard.get_global_explanations", "modulename": "exdpn.guards.xgboost_guard", "qualname": "XGBoost_Guard.get_global_explanations", "type": "function", "doc": "<p>Get a global explainable representation for the concrete machine learning classifier.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the global explainable representations. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Bar plot (Summary)\"</li>\n  <li>\"Beeswarm plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, Union[matplotlib.figure.Figure, str]]", "funcdef": "def"}, {"fullname": "exdpn.guards.xgboost_guard.XGBoost_Guard.get_local_explanations", "modulename": "exdpn.guards.xgboost_guard", "qualname": "XGBoost_Guard.get_local_explanations", "type": "function", "doc": "<p>Get explainable representations for a single decision situation. </p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>local_data (DataFrame):</strong>  A dataframe containing the single decision situation.</li>\n<li><strong>base_sample (DataFrame):</strong>  A small (10-30) sample of the population for this decision point; Used for calculation of shap values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict[str,Figure]: A dictionary containing the explainable representations for the single decision situation. Containing the following entries:</p>\n  \n  <ul>\n  <li>\"Decision plot (Multioutput)\"</li>\n  <li>\"Decision plot for <code>X</code>\" (for all output labels X)</li>\n  <li>\"Force plot for <code>X</code>\" (for all output labels X)</li>\n  </ul>\n</blockquote>\n", "signature": "(\n    self,\n    local_data: pandas.core.frame.DataFrame,\n    base_sample: pandas.core.frame.DataFrame\n) -> Dict[str, matplotlib.figure.Figure]", "funcdef": "def"}, {"fullname": "exdpn.petri_net", "modulename": "exdpn.petri_net", "type": "module", "doc": "<p>This module contains the functionality to mine a petri net from the given event log.</p>\n\n<hr />\n\n<h1 id=\"petri-net\">Petri Net</h1>\n\n<p>Directed graph that models the underlying processes contained in an event log.</p>\n\n<hr />\n"}, {"fullname": "exdpn.petri_net.get_petri_net", "modulename": "exdpn.petri_net.get_petri_net", "type": "module", "doc": "<p>This module contains the functionality to mine a petri net from the given event log.</p>\n\n<hr />\n\n<h1 id=\"petri-net\">Petri Net</h1>\n\n<p>Directed graph that models the underlying processes contained in an event log.</p>\n\n<hr />\n"}, {"fullname": "exdpn.petri_net.get_petri_net.get_petri_net", "modulename": "exdpn.petri_net.get_petri_net", "qualname": "get_petri_net", "type": "function", "doc": "<p>Mines Petri Net based on given event log and returns found Petri Net.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The given event log to mine the Petri net with.</li>\n<li><strong>miner_type (str):</strong>  Specifies the type of mining algorithm. Either inductive miner (\"IM\") or alpha miner (\"AM\", default).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <ul>\n  <li>net (PetriNet): Petri Net based on input data, later used to find decision find decision points </li>\n  <li>initial_marking (Marking): Initial Marking</li>\n  <li>final_marking (Marking): Final Marking </li>\n  </ul>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If <code>miner_type</code> neither equal to \"AM\" nor \"IM\".</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn</span> <span class=\"kn\">import</span> <span class=\"n\">petri_net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">net</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">fm</span> <span class=\"o\">=</span> <span class=\"n\">petri_net</span><span class=\"o\">.</span><span class=\"n\">get_petri_net</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    log: pm4py.objects.log.obj.EventLog,\n    miner_type: str = 'AM'\n) -> Tuple[pm4py.objects.petri_net.obj.PetriNet, pm4py.objects.petri_net.obj.Marking, pm4py.objects.petri_net.obj.Marking]", "funcdef": "def"}, {"fullname": "exdpn.util", "modulename": "exdpn.util", "type": "module", "doc": "<p>This is a module providing some basic utility functions.</p>\n"}, {"fullname": "exdpn.util.util", "modulename": "exdpn.util.util", "type": "module", "doc": "<p>This is a module providing some basic utility functions.</p>\n"}, {"fullname": "exdpn.util.util.import_log", "modulename": "exdpn.util.util", "qualname": "import_log", "type": "function", "doc": "<p>Imports an XES event log from a given path.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>path (str):</strong>  The path to the XES event log file.</li>\n<li><strong>verbose (bool, optional):</strong>  If verbose, a progress bar is shown in the console. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>EventLog: The event log object.</p>\n</blockquote>\n\n<h6 id=\"note\">Note</h6>\n\n<blockquote>\n  <p>Please make sure that the event log follows the XES standard.</p>\n</blockquote>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(path: str, verbose: bool = False) -> pm4py.objects.log.obj.EventLog", "funcdef": "def"}, {"fullname": "exdpn.util.util.extend_event_log_with_total_elapsed_time", "modulename": "exdpn.util.util", "qualname": "extend_event_log_with_total_elapsed_time", "type": "function", "doc": "<p>Extends each event in an event log with an attribute corresponding to the total time elapsed (in seconds) since the start         of the corresponding case.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The event log to be extended.</li>\n<li><strong>total_elapsed_time_attribute_name (str, optional):</strong>  The event level attribute name to be used. Default is \"eXdpn::total_elapsed_time\".</li>\n<li><strong>timestamp_attribute_name (str, optional):</strong>  The timestamp attribute name present in the event log. Default is <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"time:timestamp\").</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If the attribute with name <code>timestamp_attribute_name</code> is not present in the event log.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">extend_event_log_with_total_elapsed_time</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extend_event_log_with_total_elapsed_time</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"s1\">&#39;elapsed_time&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;elapsed_time&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    log: pm4py.objects.log.obj.EventLog,\n    total_elapsed_time_attribute_name: str = 'eXdpn::total_elapsed_time',\n    timestamp_attribute_name: str = 'time:timestamp'\n) -> None", "funcdef": "def"}, {"fullname": "exdpn.util.util.extend_event_log_with_preceding_event_delay", "modulename": "exdpn.util.util", "qualname": "extend_event_log_with_preceding_event_delay", "type": "function", "doc": "<p>Extends each event in an event log with an attribute corresponding to the delay (in seconds) between the current event and the preceding event         of the corresponding case. Initial events of each case have a delay of 0 seconds.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>log (EventLog):</strong>  The event log to be extended.</li>\n<li><strong>preceding_event_delay_attribute_name (str, optional):</strong>  The event level attribute name to be used. Default is \"eXdpn::preceding_event_delay\".</li>\n<li><strong>timestamp_attribute_name (str, optional):</strong>  The timestamp attribute name present in the event log. Default is <code>pm4py.util.xes_constants.DEFAULT_NAME_KEY</code> (\"time:timestamp\").</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If the attribute with name <code>timestamp_attribute_name</code> is not present in the event log.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<blockquote>\n  <div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">import_log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.util</span> <span class=\"kn\">import</span> <span class=\"n\">extend_event_log_with_preceding_event_delay</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">exdpn.data_petri_net</span> <span class=\"kn\">import</span> <span class=\"n\">Data_Petri_Net</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">import_log</span><span class=\"p\">(</span><span class=\"s1\">&#39;./datasets/p2p_base.xes&#39;</span><span class=\"p\">)</span>        \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">extend_event_log_with_preceding_event_delay</span><span class=\"p\">(</span><span class=\"n\">event_log</span><span class=\"p\">,</span> <span class=\"s1\">&#39;delay&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpn</span> <span class=\"o\">=</span> <span class=\"n\">Data_Petri_Net</span><span class=\"p\">(</span><span class=\"n\">event_log</span> <span class=\"o\">=</span> <span class=\"n\">event_log</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">event_level_attributes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;delay&#39;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                     <span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</code></pre></div>\n  \n  <p>For more examples refer to the <a href=\"https://aarkue.github.io/eXdpn\">User Guide</a>.</p>\n</blockquote>\n", "signature": "(\n    log: pm4py.objects.log.obj.EventLog,\n    preceding_event_delay_attribute_name: str = 'eXdpn::preceding_event_delay',\n    timestamp_attribute_name: str = 'time:timestamp'\n) -> None", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();